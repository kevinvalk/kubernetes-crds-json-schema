{
  "definitions": {
    "notification.toolkit.fluxcd.io.v1beta1.Alert": {
      "description": "Alert is the Schema for the alerts API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Alert"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "AlertSpec defines an alerting rule for events involving a list of objects",
          "properties": {
            "eventSeverity": {
              "default": "info",
              "description": "Filter events based on severity, defaults to ('info').\nIf set to 'info' no events will be filtered.",
              "enum": [
                "info",
                "error"
              ],
              "type": "string"
            },
            "eventSources": {
              "description": "Filter events based on the involved objects.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent",
                    "maxLength": 53,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 53,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "exclusionList": {
              "description": "A list of Golang regular expressions to be used for excluding messages.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "providerRef": {
              "description": "Send events using this provider.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "summary": {
              "description": "Short description of the impact and affected cluster.",
              "type": "string"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent events dispatching.\nDefaults to false.",
              "type": "boolean"
            }
          },
          "required": [
            "eventSources",
            "providerRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "AlertStatus defines the observed state of Alert",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta2.Alert": {
      "description": "Alert is the Schema for the alerts API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Alert"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "AlertSpec defines an alerting rule for events involving a list of objects.",
          "properties": {
            "eventMetadata": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "EventMetadata is an optional field for adding metadata to events dispatched by the\ncontroller. This can be used for enhancing the context of the event. If a field\nwould override one already present on the original event as generated by the emitter,\nthen the override doesn't happen, i.e. the original value is preserved, and an info\nlog is printed.",
              "type": "object"
            },
            "eventSeverity": {
              "default": "info",
              "description": "EventSeverity specifies how to filter events based on severity.\nIf set to 'info' no events will be filtered.",
              "enum": [
                "info",
                "error"
              ],
              "type": "string"
            },
            "eventSources": {
              "description": "EventSources specifies how to filter events based\non the involved object kind, name and namespace.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent\nIf multiple resources are targeted `*` may be set.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "exclusionList": {
              "description": "ExclusionList specifies a list of Golang regular expressions\nto be used for excluding messages.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "inclusionList": {
              "description": "InclusionList specifies a list of Golang regular expressions\nto be used for including messages.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "providerRef": {
              "description": "ProviderRef specifies which Provider this Alert should use.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "summary": {
              "description": "Summary holds a short description of the impact and affected cluster.",
              "maxLength": 255,
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this Alert.",
              "type": "boolean"
            }
          },
          "required": [
            "eventSources",
            "providerRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "AlertStatus defines the observed state of the Alert.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the Alert.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta3.Alert": {
      "description": "Alert is the Schema for the alerts API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta3"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Alert"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "AlertSpec defines an alerting rule for events involving a list of objects.",
          "properties": {
            "eventMetadata": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "EventMetadata is an optional field for adding metadata to events dispatched by the\ncontroller. This can be used for enhancing the context of the event. If a field\nwould override one already present on the original event as generated by the emitter,\nthen the override doesn't happen, i.e. the original value is preserved, and an info\nlog is printed.",
              "type": "object"
            },
            "eventSeverity": {
              "default": "info",
              "description": "EventSeverity specifies how to filter events based on severity.\nIf set to 'info' no events will be filtered.",
              "enum": [
                "info",
                "error"
              ],
              "type": "string"
            },
            "eventSources": {
              "description": "EventSources specifies how to filter events based\non the involved object kind, name and namespace.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent\nIf multiple resources are targeted `*` may be set.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "exclusionList": {
              "description": "ExclusionList specifies a list of Golang regular expressions\nto be used for excluding messages.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "inclusionList": {
              "description": "InclusionList specifies a list of Golang regular expressions\nto be used for including messages.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "providerRef": {
              "description": "ProviderRef specifies which Provider this Alert should use.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "summary": {
              "description": "Summary holds a short description of the impact and affected cluster.\nDeprecated: Use EventMetadata instead.",
              "maxLength": 255,
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this Alert.",
              "type": "boolean"
            }
          },
          "required": [
            "eventSources",
            "providerRef"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1.Bucket": {
      "description": "Bucket is the Schema for the buckets API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Bucket"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "BucketSpec specifies the required configuration to produce an Artifact for\nan object storage bucket.",
          "properties": {
            "bucketName": {
              "description": "BucketName is the name of the object storage bucket.",
              "type": "string"
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nbucket. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nThis field is only supported for the `generic` provider.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "endpoint": {
              "description": "Endpoint is the object storage address the BucketName is located at.",
              "type": "string"
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP Endpoint.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the Bucket Endpoint is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "prefix": {
              "description": "Prefix to use for server-side filtering of files in the Bucket.",
              "type": "string"
            },
            "provider": {
              "default": "generic",
              "description": "Provider of the object storage bucket.\nDefaults to 'generic', which expects an S3 (API) compatible object\nstorage.",
              "enum": [
                "generic",
                "aws",
                "gcp",
                "azure"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the Bucket server.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "region": {
              "description": "Region of the Endpoint where the BucketName is located in.",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials\nfor the Bucket.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "sts": {
              "description": "STS specifies the required configuration to use a Security Token\nService for fetching temporary credentials to authenticate in a\nBucket provider.\n\nThis field is only supported for the `aws` and `generic` providers.",
              "properties": {
                "certSecretRef": {
                  "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nSTS endpoint. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nThis field is only supported for the `ldap` provider.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "endpoint": {
                  "description": "Endpoint is the HTTP/S endpoint of the Security Token Service from\nwhere temporary credentials will be fetched.",
                  "pattern": "^(http|https)://.*$",
                  "type": "string"
                },
                "provider": {
                  "description": "Provider of the Security Token Service.",
                  "enum": [
                    "aws",
                    "ldap"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Secret containing authentication credentials\nfor the STS endpoint. This Secret must contain the fields `username`\nand `password` and is supported only for the `ldap` provider.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "endpoint",
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nBucket.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "Timeout for fetch operations, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            }
          },
          "required": [
            "bucketName",
            "endpoint",
            "interval"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "STS configuration is only supported for the 'aws' and 'generic' Bucket providers",
              "rule": "self.provider == 'aws' || self.provider == 'generic' || !has(self.sts)"
            },
            {
              "message": "'aws' is the only supported STS provider for the 'aws' Bucket provider",
              "rule": "self.provider != 'aws' || !has(self.sts) || self.sts.provider == 'aws'"
            },
            {
              "message": "'ldap' is the only supported STS provider for the 'generic' Bucket provider",
              "rule": "self.provider != 'generic' || !has(self.sts) || self.sts.provider == 'ldap'"
            },
            {
              "message": "spec.sts.secretRef is not required for the 'aws' STS provider",
              "rule": "!has(self.sts) || self.sts.provider != 'aws' || !has(self.sts.secretRef)"
            },
            {
              "message": "spec.sts.certSecretRef is not required for the 'aws' STS provider",
              "rule": "!has(self.sts) || self.sts.provider != 'aws' || !has(self.sts.certSecretRef)"
            }
          ],
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "BucketStatus records the observed state of a Bucket.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful Bucket reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the Bucket.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the Bucket object.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nBucketStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta1.Bucket": {
      "description": "Bucket is the Schema for the buckets API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Bucket"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "BucketSpec defines the desired state of an S3 compatible bucket",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "bucketName": {
              "description": "The bucket name.",
              "type": "string"
            },
            "endpoint": {
              "description": "The bucket endpoint address.",
              "type": "string"
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS S3 HTTP endpoint.",
              "type": "boolean"
            },
            "interval": {
              "description": "The interval at which to check for bucket updates.",
              "type": "string"
            },
            "provider": {
              "default": "generic",
              "description": "The S3 compatible storage provider name, default ('generic').",
              "enum": [
                "generic",
                "aws",
                "gcp"
              ],
              "type": "string"
            },
            "region": {
              "description": "The bucket region.",
              "type": "string"
            },
            "secretRef": {
              "description": "The name of the secret containing authentication credentials\nfor the Bucket.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "The timeout for download operations, defaults to 60s.",
              "type": "string"
            }
          },
          "required": [
            "bucketName",
            "endpoint",
            "interval"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "BucketStatus defines the observed state of a bucket",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful Bucket sync.",
              "properties": {
                "checksum": {
                  "description": "Checksum is the SHA256 checksum of the artifact.",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of this\nartifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "path": {
                  "description": "Path is the relative file path of this artifact.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm\nchart version, etc.",
                  "type": "string"
                },
                "url": {
                  "description": "URL is the HTTP address of this artifact.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the Bucket.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the download link for the artifact output of the last Bucket sync.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta2.Bucket": {
      "description": "Bucket is the Schema for the buckets API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Bucket"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "BucketSpec specifies the required configuration to produce an Artifact for\nan object storage bucket.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "bucketName": {
              "description": "BucketName is the name of the object storage bucket.",
              "type": "string"
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nbucket. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nThis field is only supported for the `generic` provider.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "endpoint": {
              "description": "Endpoint is the object storage address the BucketName is located at.",
              "type": "string"
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP Endpoint.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the Bucket Endpoint is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "prefix": {
              "description": "Prefix to use for server-side filtering of files in the Bucket.",
              "type": "string"
            },
            "provider": {
              "default": "generic",
              "description": "Provider of the object storage bucket.\nDefaults to 'generic', which expects an S3 (API) compatible object\nstorage.",
              "enum": [
                "generic",
                "aws",
                "gcp",
                "azure"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the Bucket server.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "region": {
              "description": "Region of the Endpoint where the BucketName is located in.",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials\nfor the Bucket.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "sts": {
              "description": "STS specifies the required configuration to use a Security Token\nService for fetching temporary credentials to authenticate in a\nBucket provider.\n\nThis field is only supported for the `aws` and `generic` providers.",
              "properties": {
                "certSecretRef": {
                  "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nSTS endpoint. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nThis field is only supported for the `ldap` provider.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "endpoint": {
                  "description": "Endpoint is the HTTP/S endpoint of the Security Token Service from\nwhere temporary credentials will be fetched.",
                  "pattern": "^(http|https)://.*$",
                  "type": "string"
                },
                "provider": {
                  "description": "Provider of the Security Token Service.",
                  "enum": [
                    "aws",
                    "ldap"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Secret containing authentication credentials\nfor the STS endpoint. This Secret must contain the fields `username`\nand `password` and is supported only for the `ldap` provider.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "endpoint",
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nBucket.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "Timeout for fetch operations, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            }
          },
          "required": [
            "bucketName",
            "endpoint",
            "interval"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "STS configuration is only supported for the 'aws' and 'generic' Bucket providers",
              "rule": "self.provider == 'aws' || self.provider == 'generic' || !has(self.sts)"
            },
            {
              "message": "'aws' is the only supported STS provider for the 'aws' Bucket provider",
              "rule": "self.provider != 'aws' || !has(self.sts) || self.sts.provider == 'aws'"
            },
            {
              "message": "'ldap' is the only supported STS provider for the 'generic' Bucket provider",
              "rule": "self.provider != 'generic' || !has(self.sts) || self.sts.provider == 'ldap'"
            },
            {
              "message": "spec.sts.secretRef is not required for the 'aws' STS provider",
              "rule": "!has(self.sts) || self.sts.provider != 'aws' || !has(self.sts.secretRef)"
            },
            {
              "message": "spec.sts.certSecretRef is not required for the 'aws' STS provider",
              "rule": "!has(self.sts) || self.sts.provider != 'aws' || !has(self.sts.certSecretRef)"
            }
          ],
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "BucketStatus records the observed state of a Bucket.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful Bucket reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the Bucket.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the Bucket object.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nBucketStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1.GitRepository": {
      "description": "GitRepository is the Schema for the gitrepositories API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "GitRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "GitRepositorySpec specifies the required configuration to produce an\nArtifact for a Git repository.",
          "properties": {
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "include": {
              "description": "Include specifies a list of GitRepository resources which Artifacts\nshould be included in the Artifact produced for this GitRepository.",
              "items": {
                "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
                "properties": {
                  "fromPath": {
                    "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "toPath": {
                    "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                    "type": "string"
                  }
                },
                "required": [
                  "repository"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "Interval at which the GitRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "provider": {
              "description": "Provider used for authentication, can be 'azure', 'github', 'generic'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "azure",
                "github"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the Git server.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "recurseSubmodules": {
              "description": "RecurseSubmodules enables the initialization of all submodules within\nthe GitRepository as cloned from the URL, using their default settings.",
              "type": "boolean"
            },
            "ref": {
              "description": "Reference specifies the Git reference to resolve and monitor for\nchanges, defaults to the 'master' branch.",
              "properties": {
                "branch": {
                  "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                  "type": "string"
                },
                "commit": {
                  "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                  "type": "string"
                },
                "semver": {
                  "description": "SemVer tag expression to check out, takes precedence over Tag.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag to check out, takes precedence over Branch.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials for\nthe GitRepository.\nFor HTTPS repositories the Secret must contain 'username' and 'password'\nfields for basic auth or 'bearerToken' field for token auth.\nFor SSH repositories the Secret must contain 'identity'\nand 'known_hosts' fields.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "sparseCheckout": {
              "description": "SparseCheckout specifies a list of directories to checkout when cloning\nthe repository. If specified, only these directories are included in the\nArtifact produced for this GitRepository.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nGitRepository.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "Timeout for Git operations like cloning, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "url": {
              "description": "URL specifies the Git repository URL, it can be an HTTP/S or SSH address.",
              "pattern": "^(http|https|ssh)://.*$",
              "type": "string"
            },
            "verify": {
              "description": "Verification specifies the configuration to verify the Git commit\nsignature(s).",
              "properties": {
                "mode": {
                  "default": "HEAD",
                  "description": "Mode specifies which Git object(s) should be verified.\n\nThe variants \"head\" and \"HEAD\" both imply the same thing, i.e. verify\nthe commit that the HEAD of the Git repository points to. The variant\n\"head\" solely exists to ensure backwards compatibility.",
                  "enum": [
                    "head",
                    "HEAD",
                    "Tag",
                    "TagAndHEAD"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Secret containing the public keys of trusted Git\nauthors.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "GitRepositoryStatus records the observed state of a Git repository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful GitRepository reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the GitRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "includedArtifacts": {
              "description": "IncludedArtifacts contains a list of the last successfully included\nArtifacts as instructed by GitRepositorySpec.Include.",
              "items": {
                "description": "Artifact represents the output of a Source reconciliation.",
                "properties": {
                  "digest": {
                    "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                    "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                    "type": "string"
                  },
                  "lastUpdateTime": {
                    "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Metadata holds upstream information such as OCI annotations.",
                    "type": "object"
                  },
                  "path": {
                    "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                    "type": "string"
                  },
                  "revision": {
                    "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                    "type": "string"
                  },
                  "size": {
                    "description": "Size is the number of bytes in the file.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "url": {
                    "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                    "type": "string"
                  }
                },
                "required": [
                  "lastUpdateTime",
                  "path",
                  "revision",
                  "url"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the GitRepository\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "observedInclude": {
              "description": "ObservedInclude is the observed list of GitRepository resources used to\nproduce the current Artifact.",
              "items": {
                "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
                "properties": {
                  "fromPath": {
                    "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "toPath": {
                    "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                    "type": "string"
                  }
                },
                "required": [
                  "repository"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "observedRecurseSubmodules": {
              "description": "ObservedRecurseSubmodules is the observed resource submodules\nconfiguration used to produce the current Artifact.",
              "type": "boolean"
            },
            "observedSparseCheckout": {
              "description": "ObservedSparseCheckout is the observed list of directories used to\nproduce the current Artifact.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sourceVerificationMode": {
              "description": "SourceVerificationMode is the last used verification mode indicating\nwhich Git object(s) have been verified.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta1.GitRepository": {
      "description": "GitRepository is the Schema for the gitrepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "GitRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "GitRepositorySpec defines the desired state of a Git repository.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "gitImplementation": {
              "default": "go-git",
              "description": "Determines which git client library to use.\nDefaults to go-git, valid values are ('go-git', 'libgit2').",
              "enum": [
                "go-git",
                "libgit2"
              ],
              "type": "string"
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "include": {
              "description": "Extra git repositories to map into the repository",
              "items": {
                "description": "GitRepositoryInclude defines a source with a from and to path.",
                "properties": {
                  "fromPath": {
                    "description": "The path to copy contents from, defaults to the root directory.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "Reference to a GitRepository to include.",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "toPath": {
                    "description": "The path to copy contents to, defaults to the name of the source ref.",
                    "type": "string"
                  }
                },
                "required": [
                  "repository"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "The interval at which to check for repository updates.",
              "type": "string"
            },
            "recurseSubmodules": {
              "description": "When enabled, after the clone is created, initializes all submodules within,\nusing their default settings.\nThis option is available only when using the 'go-git' GitImplementation.",
              "type": "boolean"
            },
            "ref": {
              "description": "The Git reference to checkout and monitor for changes, defaults to\nmaster branch.",
              "properties": {
                "branch": {
                  "description": "The Git branch to checkout, defaults to master.",
                  "type": "string"
                },
                "commit": {
                  "description": "The Git commit SHA to checkout, if specified Tag filters will be ignored.",
                  "type": "string"
                },
                "semver": {
                  "description": "The Git tag semver expression, takes precedence over Tag.",
                  "type": "string"
                },
                "tag": {
                  "description": "The Git tag to checkout, takes precedence over Branch.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "The secret name containing the Git credentials.\nFor HTTPS repositories the secret must contain username and password\nfields.\nFor SSH repositories the secret must contain identity and known_hosts\nfields.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "The timeout for remote Git operations like cloning, defaults to 60s.",
              "type": "string"
            },
            "url": {
              "description": "The repository URL, can be a HTTP/S or SSH address.",
              "pattern": "^(http|https|ssh)://.*$",
              "type": "string"
            },
            "verify": {
              "description": "Verify OpenPGP signature for the Git commit HEAD points to.",
              "properties": {
                "mode": {
                  "description": "Mode describes what git object should be verified, currently ('head').",
                  "enum": [
                    "head"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "The secret name containing the public keys of all trusted Git authors.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "mode"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "GitRepositoryStatus defines the observed state of a Git repository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful repository sync.",
              "properties": {
                "checksum": {
                  "description": "Checksum is the SHA256 checksum of the artifact.",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of this\nartifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "path": {
                  "description": "Path is the relative file path of this artifact.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm\nchart version, etc.",
                  "type": "string"
                },
                "url": {
                  "description": "URL is the HTTP address of this artifact.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the GitRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "includedArtifacts": {
              "description": "IncludedArtifacts represents the included artifacts from the last successful repository sync.",
              "items": {
                "description": "Artifact represents the output of a source synchronisation.",
                "properties": {
                  "checksum": {
                    "description": "Checksum is the SHA256 checksum of the artifact.",
                    "type": "string"
                  },
                  "lastUpdateTime": {
                    "description": "LastUpdateTime is the timestamp corresponding to the last update of this\nartifact.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path is the relative file path of this artifact.",
                    "type": "string"
                  },
                  "revision": {
                    "description": "Revision is a human readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm\nchart version, etc.",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL is the HTTP address of this artifact.",
                    "type": "string"
                  }
                },
                "required": [
                  "lastUpdateTime",
                  "path",
                  "url"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the download link for the artifact output of the last repository\nsync.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta2.GitRepository": {
      "description": "GitRepository is the Schema for the gitrepositories API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "GitRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "GitRepositorySpec specifies the required configuration to produce an\nArtifact for a Git repository.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "gitImplementation": {
              "default": "go-git",
              "description": "GitImplementation specifies which Git client library implementation to\nuse. Defaults to 'go-git', valid values are ('go-git', 'libgit2').\nDeprecated: gitImplementation is deprecated now that 'go-git' is the\nonly supported implementation.",
              "enum": [
                "go-git",
                "libgit2"
              ],
              "type": "string"
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "include": {
              "description": "Include specifies a list of GitRepository resources which Artifacts\nshould be included in the Artifact produced for this GitRepository.",
              "items": {
                "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
                "properties": {
                  "fromPath": {
                    "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "toPath": {
                    "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                    "type": "string"
                  }
                },
                "required": [
                  "repository"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "Interval at which to check the GitRepository for updates.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "recurseSubmodules": {
              "description": "RecurseSubmodules enables the initialization of all submodules within\nthe GitRepository as cloned from the URL, using their default settings.",
              "type": "boolean"
            },
            "ref": {
              "description": "Reference specifies the Git reference to resolve and monitor for\nchanges, defaults to the 'master' branch.",
              "properties": {
                "branch": {
                  "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                  "type": "string"
                },
                "commit": {
                  "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                  "type": "string"
                },
                "semver": {
                  "description": "SemVer tag expression to check out, takes precedence over Tag.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag to check out, takes precedence over Branch.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials for\nthe GitRepository.\nFor HTTPS repositories the Secret must contain 'username' and 'password'\nfields for basic auth or 'bearerToken' field for token auth.\nFor SSH repositories the Secret must contain 'identity'\nand 'known_hosts' fields.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nGitRepository.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "Timeout for Git operations like cloning, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "url": {
              "description": "URL specifies the Git repository URL, it can be an HTTP/S or SSH address.",
              "pattern": "^(http|https|ssh)://.*$",
              "type": "string"
            },
            "verify": {
              "description": "Verification specifies the configuration to verify the Git commit\nsignature(s).",
              "properties": {
                "mode": {
                  "description": "Mode specifies what Git object should be verified, currently ('head').",
                  "enum": [
                    "head"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Secret containing the public keys of trusted Git\nauthors.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "mode",
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "GitRepositoryStatus records the observed state of a Git repository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful GitRepository reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the GitRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "contentConfigChecksum": {
              "description": "ContentConfigChecksum is a checksum of all the configurations related to\nthe content of the source artifact:\n - .spec.ignore\n - .spec.recurseSubmodules\n - .spec.included and the checksum of the included artifacts\nobserved in .status.observedGeneration version of the object. This can\nbe used to determine if the content of the included repository has\nchanged.\nIt has the format of `<algo>:<checksum>`, for example: `sha256:<checksum>`.\n\nDeprecated: Replaced with explicit fields for observed artifact content\nconfig in the status.",
              "type": "string"
            },
            "includedArtifacts": {
              "description": "IncludedArtifacts contains a list of the last successfully included\nArtifacts as instructed by GitRepositorySpec.Include.",
              "items": {
                "description": "Artifact represents the output of a Source reconciliation.",
                "properties": {
                  "digest": {
                    "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                    "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                    "type": "string"
                  },
                  "lastUpdateTime": {
                    "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Metadata holds upstream information such as OCI annotations.",
                    "type": "object"
                  },
                  "path": {
                    "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                    "type": "string"
                  },
                  "revision": {
                    "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                    "type": "string"
                  },
                  "size": {
                    "description": "Size is the number of bytes in the file.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "url": {
                    "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                    "type": "string"
                  }
                },
                "required": [
                  "lastUpdateTime",
                  "path",
                  "revision",
                  "url"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the GitRepository\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "observedInclude": {
              "description": "ObservedInclude is the observed list of GitRepository resources used to\nto produce the current Artifact.",
              "items": {
                "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
                "properties": {
                  "fromPath": {
                    "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "toPath": {
                    "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                    "type": "string"
                  }
                },
                "required": [
                  "repository"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "observedRecurseSubmodules": {
              "description": "ObservedRecurseSubmodules is the observed resource submodules\nconfiguration used to produce the current Artifact.",
              "type": "boolean"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nGitRepositoryStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1.HelmChart": {
      "description": "HelmChart is the Schema for the helmcharts API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmChart"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmChartSpec specifies the desired state of a Helm chart.",
          "properties": {
            "chart": {
              "description": "Chart is the name or path the Helm chart is available at in the\nSourceRef.",
              "type": "string"
            },
            "ignoreMissingValuesFiles": {
              "description": "IgnoreMissingValuesFiles controls whether to silently ignore missing values\nfiles rather than failing.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the HelmChart SourceRef is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "reconcileStrategy": {
              "default": "ChartVersion",
              "description": "ReconcileStrategy determines what enables the creation of a new artifact.\nValid values are ('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
              "enum": [
                "ChartVersion",
                "Revision"
              ],
              "type": "string"
            },
            "sourceRef": {
              "description": "SourceRef is the reference to the Source the chart is available at.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent, valid values are ('HelmRepository', 'GitRepository',\n'Bucket').",
                  "enum": [
                    "HelmRepository",
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nsource.",
              "type": "boolean"
            },
            "valuesFiles": {
              "description": "ValuesFiles is an alternative list of values files to use as the chart\nvalues (values.yaml is not included by default), expected to be a\nrelative path in the SourceRef.\nValues files are merged in the order of this list with the last file\noverriding the first. Ignored when omitted.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "verify": {
              "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported when using HelmRepository source with spec.type 'oci'.\nChart dependencies, which are not bundled in the umbrella chart artifact, are not verified.",
              "properties": {
                "matchOIDCIdentity": {
                  "description": "MatchOIDCIdentity specifies the identity matching criteria to use\nwhile verifying an OCI artifact which was signed using Cosign keyless\nsigning. The artifact's identity is deemed to be verified if any of the\nspecified matchers match against the identity.",
                  "items": {
                    "description": "OIDCIdentityMatch specifies options for verifying the certificate identity,\ni.e. the issuer and the subject of the certificate.",
                    "properties": {
                      "issuer": {
                        "description": "Issuer specifies the regex pattern to match against to verify\nthe OIDC issuer in the Fulcio certificate. The pattern must be a\nvalid Go regular expression.",
                        "type": "string"
                      },
                      "subject": {
                        "description": "Subject specifies the regex pattern to match against to verify\nthe identity subject in the Fulcio certificate. The pattern must\nbe a valid Go regular expression.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issuer",
                      "subject"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "provider": {
                  "default": "cosign",
                  "description": "Provider specifies the technology used to sign the OCI Artifact.",
                  "enum": [
                    "cosign",
                    "notation"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "default": "*",
              "description": "Version is the chart version semver expression, ignored for charts from\nGitRepository and Bucket sources. Defaults to latest when omitted.",
              "type": "string"
            }
          },
          "required": [
            "chart",
            "interval",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmChartStatus records the observed state of the HelmChart.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmChart.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedChartName": {
              "description": "ObservedChartName is the last observed chart name as specified by the\nresolved chart reference.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the HelmChart\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "observedSourceArtifactRevision": {
              "description": "ObservedSourceArtifactRevision is the last observed Artifact.Revision\nof the HelmChartSpec.SourceRef.",
              "type": "string"
            },
            "observedValuesFiles": {
              "description": "ObservedValuesFiles are the observed value files of the last successful\nreconciliation.\nIt matches the chart in the last successfully reconciled artifact.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nBucketStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta1.HelmChart": {
      "description": "HelmChart is the Schema for the helmcharts API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmChart"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmChartSpec defines the desired state of a Helm chart.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "chart": {
              "description": "The name or path the Helm chart is available at in the SourceRef.",
              "type": "string"
            },
            "interval": {
              "description": "The interval at which to check the Source for updates.",
              "type": "string"
            },
            "reconcileStrategy": {
              "default": "ChartVersion",
              "description": "Determines what enables the creation of a new artifact. Valid values are\n('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
              "enum": [
                "ChartVersion",
                "Revision"
              ],
              "type": "string"
            },
            "sourceRef": {
              "description": "The reference to the Source the chart is available at.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent, valid values are ('HelmRepository', 'GitRepository',\n'Bucket').",
                  "enum": [
                    "HelmRepository",
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "valuesFile": {
              "description": "Alternative values file to use as the default chart values, expected to\nbe a relative path in the SourceRef. Deprecated in favor of ValuesFiles,\nfor backwards compatibility the file defined here is merged before the\nValuesFiles items. Ignored when omitted.",
              "type": "string"
            },
            "valuesFiles": {
              "description": "Alternative list of values files to use as the chart values (values.yaml\nis not included by default), expected to be a relative path in the SourceRef.\nValues files are merged in the order of this list with the last file overriding\nthe first. Ignored when omitted.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "version": {
              "default": "*",
              "description": "The chart version semver expression, ignored for charts from GitRepository\nand Bucket sources. Defaults to latest when omitted.",
              "type": "string"
            }
          },
          "required": [
            "chart",
            "interval",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmChartStatus defines the observed state of the HelmChart.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful chart sync.",
              "properties": {
                "checksum": {
                  "description": "Checksum is the SHA256 checksum of the artifact.",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of this\nartifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "path": {
                  "description": "Path is the relative file path of this artifact.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm\nchart version, etc.",
                  "type": "string"
                },
                "url": {
                  "description": "URL is the HTTP address of this artifact.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmChart.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the download link for the last chart pulled.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta2.HelmChart": {
      "description": "HelmChart is the Schema for the helmcharts API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmChart"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmChartSpec specifies the desired state of a Helm chart.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "chart": {
              "description": "Chart is the name or path the Helm chart is available at in the\nSourceRef.",
              "type": "string"
            },
            "ignoreMissingValuesFiles": {
              "description": "IgnoreMissingValuesFiles controls whether to silently ignore missing values\nfiles rather than failing.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the HelmChart SourceRef is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "reconcileStrategy": {
              "default": "ChartVersion",
              "description": "ReconcileStrategy determines what enables the creation of a new artifact.\nValid values are ('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
              "enum": [
                "ChartVersion",
                "Revision"
              ],
              "type": "string"
            },
            "sourceRef": {
              "description": "SourceRef is the reference to the Source the chart is available at.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent, valid values are ('HelmRepository', 'GitRepository',\n'Bucket').",
                  "enum": [
                    "HelmRepository",
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nsource.",
              "type": "boolean"
            },
            "valuesFile": {
              "description": "ValuesFile is an alternative values file to use as the default chart\nvalues, expected to be a relative path in the SourceRef. Deprecated in\nfavor of ValuesFiles, for backwards compatibility the file specified here\nis merged before the ValuesFiles items. Ignored when omitted.",
              "type": "string"
            },
            "valuesFiles": {
              "description": "ValuesFiles is an alternative list of values files to use as the chart\nvalues (values.yaml is not included by default), expected to be a\nrelative path in the SourceRef.\nValues files are merged in the order of this list with the last file\noverriding the first. Ignored when omitted.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "verify": {
              "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported when using HelmRepository source with spec.type 'oci'.\nChart dependencies, which are not bundled in the umbrella chart artifact, are not verified.",
              "properties": {
                "matchOIDCIdentity": {
                  "description": "MatchOIDCIdentity specifies the identity matching criteria to use\nwhile verifying an OCI artifact which was signed using Cosign keyless\nsigning. The artifact's identity is deemed to be verified if any of the\nspecified matchers match against the identity.",
                  "items": {
                    "description": "OIDCIdentityMatch specifies options for verifying the certificate identity,\ni.e. the issuer and the subject of the certificate.",
                    "properties": {
                      "issuer": {
                        "description": "Issuer specifies the regex pattern to match against to verify\nthe OIDC issuer in the Fulcio certificate. The pattern must be a\nvalid Go regular expression.",
                        "type": "string"
                      },
                      "subject": {
                        "description": "Subject specifies the regex pattern to match against to verify\nthe identity subject in the Fulcio certificate. The pattern must\nbe a valid Go regular expression.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issuer",
                      "subject"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "provider": {
                  "default": "cosign",
                  "description": "Provider specifies the technology used to sign the OCI Artifact.",
                  "enum": [
                    "cosign",
                    "notation"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "default": "*",
              "description": "Version is the chart version semver expression, ignored for charts from\nGitRepository and Bucket sources. Defaults to latest when omitted.",
              "type": "string"
            }
          },
          "required": [
            "chart",
            "interval",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmChartStatus records the observed state of the HelmChart.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmChart.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedChartName": {
              "description": "ObservedChartName is the last observed chart name as specified by the\nresolved chart reference.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the HelmChart\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "observedSourceArtifactRevision": {
              "description": "ObservedSourceArtifactRevision is the last observed Artifact.Revision\nof the HelmChartSpec.SourceRef.",
              "type": "string"
            },
            "observedValuesFiles": {
              "description": "ObservedValuesFiles are the observed value files of the last successful\nreconciliation.\nIt matches the chart in the last successfully reconciled artifact.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nBucketStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "helm.toolkit.fluxcd.io.v2.HelmRelease": {
      "description": "HelmRelease is the Schema for the helmreleases API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "helm.toolkit.fluxcd.io/v2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRelease"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmReleaseSpec defines the desired state of a Helm release.",
          "properties": {
            "chart": {
              "description": "Chart defines the template of the v1.HelmChart that should be created\nfor this HelmRelease.",
              "properties": {
                "metadata": {
                  "description": "ObjectMeta holds the template for metadata like labels and annotations.",
                  "properties": {
                    "annotations": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/",
                      "type": "object"
                    },
                    "labels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "spec": {
                  "description": "Spec holds the template for the v1.HelmChartSpec for this HelmRelease.",
                  "properties": {
                    "chart": {
                      "description": "The name or path the Helm chart is available at in the SourceRef.",
                      "maxLength": 2048,
                      "minLength": 1,
                      "type": "string"
                    },
                    "ignoreMissingValuesFiles": {
                      "description": "IgnoreMissingValuesFiles controls whether to silently ignore missing values files rather than failing.",
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval at which to check the v1.Source for updates. Defaults to\n'HelmReleaseSpec.Interval'.",
                      "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                      "type": "string"
                    },
                    "reconcileStrategy": {
                      "default": "ChartVersion",
                      "description": "Determines what enables the creation of a new artifact. Valid values are\n('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
                      "enum": [
                        "ChartVersion",
                        "Revision"
                      ],
                      "type": "string"
                    },
                    "sourceRef": {
                      "description": "The name and namespace of the v1.Source the chart is available at.",
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion of the referent.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referent.",
                          "enum": [
                            "HelmRepository",
                            "GitRepository",
                            "Bucket"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent.",
                          "maxLength": 253,
                          "minLength": 1,
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referent.",
                          "maxLength": 63,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "valuesFiles": {
                      "description": "Alternative list of values files to use as the chart values (values.yaml\nis not included by default), expected to be a relative path in the SourceRef.\nValues files are merged in the order of this list with the last file overriding\nthe first. Ignored when omitted.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "verify": {
                      "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported for OCI sources.\nChart dependencies, which are not bundled in the umbrella chart artifact,\nare not verified.",
                      "properties": {
                        "provider": {
                          "default": "cosign",
                          "description": "Provider specifies the technology used to sign the OCI Helm chart.",
                          "enum": [
                            "cosign",
                            "notation"
                          ],
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "provider"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "version": {
                      "default": "*",
                      "description": "Version semver expression, ignored for charts from v1.GitRepository and\nv1beta2.Bucket sources. Defaults to latest when omitted.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "chart",
                    "sourceRef"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "spec"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "chartRef": {
              "description": "ChartRef holds a reference to a source controller resource containing the\nHelm chart artifact.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.",
                  "enum": [
                    "OCIRepository",
                    "HelmChart"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "maxLength": 253,
                  "minLength": 1,
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes\nresource object that contains the reference.",
                  "maxLength": 63,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice with\nreferences to HelmRelease resources that must be ready before this HelmRelease\ncan be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "driftDetection": {
              "description": "DriftDetection holds the configuration for detecting and handling\ndifferences between the manifest in the Helm storage and the resources\ncurrently existing in the cluster.",
              "properties": {
                "ignore": {
                  "description": "Ignore contains a list of rules for specifying which changes to ignore\nduring diffing.",
                  "items": {
                    "description": "IgnoreRule defines a rule to selectively disregard specific changes during\nthe drift detection process.",
                    "properties": {
                      "paths": {
                        "description": "Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from\nconsideration in a Kubernetes object.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "target": {
                        "description": "Target is a selector for specifying Kubernetes objects to which this\nrule applies.\nIf Target is not set, the Paths will be ignored for all Kubernetes\nobjects within the manifest of the Helm release.",
                        "properties": {
                          "annotationSelector": {
                            "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                            "type": "string"
                          },
                          "group": {
                            "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "labelSelector": {
                            "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name to match resources with.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace to select resources from.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "mode": {
                  "description": "Mode defines how differences should be handled between the Helm manifest\nand the manifest currently applied to the cluster.\nIf not explicitly set, it defaults to DiffModeDisabled.",
                  "enum": [
                    "enabled",
                    "warn",
                    "disabled"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "install": {
              "description": "Install holds the configuration for Helm install actions for this HelmRelease.",
              "properties": {
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Create` and if omitted\nCRDs are installed but not updated.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are applied (installed) during Helm install action.\nWith this option users can opt in to CRD replace existing CRDs on Helm\ninstall actions, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "createNamespace": {
                  "description": "CreateNamespace tells the Helm install action to create the\nHelmReleaseSpec.TargetNamespace if it does not exist yet.\nOn uninstall, the namespace will not be garbage collected.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm install action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm install action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableSchemaValidation": {
                  "description": "DisableSchemaValidation prevents the Helm install action from validating\nthe values against the JSON Schema.",
                  "type": "boolean"
                },
                "disableTakeOwnership": {
                  "description": "DisableTakeOwnership disables taking ownership of existing resources\nduring the Helm install action. Defaults to false.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm install\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an install action but fail. Defaults to\n'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false'.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using an uninstall, is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "replace": {
                  "description": "Replace tells the Helm install action to re-use the 'ReleaseName', but only\nif that name is a deleted release which remains in the history.",
                  "type": "boolean"
                },
                "skipCRDs": {
                  "description": "SkipCRDs tells the Helm install action to not install any CRDs. By default,\nCRDs are installed if not already present.\n\nDeprecated use CRD policy (`crds`) attribute with value `Skip` instead.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm install action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval at which to reconcile the Helm release.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "kubeConfig": {
              "description": "KubeConfig for reconciling the HelmRelease on a remote cluster.\nWhen used in combination with HelmReleaseSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when HelmReleaseSpec.ServiceAccountName\nis empty.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret, when not specified an implementation-specific default key is used.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "maxHistory": {
              "description": "MaxHistory is the number of revisions saved by Helm for this HelmRelease.\nUse '0' for an unlimited number of revisions; defaults to '5'.",
              "type": "integer"
            },
            "persistentClient": {
              "description": "PersistentClient tells the controller to use a persistent Kubernetes\nclient for this release. When enabled, the client will be reused for the\nduration of the reconciliation, instead of being created and destroyed\nfor each (step of a) Helm action.\n\nThis can improve performance, but may cause issues with some Helm charts\nthat for example do create Custom Resource Definitions during installation\noutside Helm's CRD lifecycle hooks, which are then not observed to be\navailable by e.g. post-install hooks.\n\nIf not set, it defaults to true.",
              "type": "boolean"
            },
            "postRenderers": {
              "description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order\nof their definition.",
              "items": {
                "description": "PostRenderer contains a Helm PostRenderer specification.",
                "properties": {
                  "kustomize": {
                    "description": "Kustomization to apply as PostRenderer.",
                    "properties": {
                      "images": {
                        "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
                        "items": {
                          "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                          "properties": {
                            "digest": {
                              "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is a tag-less image name.",
                              "type": "string"
                            },
                            "newName": {
                              "description": "NewName is the value used to replace the original name.",
                              "type": "string"
                            },
                            "newTag": {
                              "description": "NewTag is the value used to replace the original tag.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patches": {
                        "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
                        "items": {
                          "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                          "properties": {
                            "patch": {
                              "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                              "type": "string"
                            },
                            "target": {
                              "description": "Target points to the resources that the patch document should be applied to.",
                              "properties": {
                                "annotationSelector": {
                                  "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                                  "type": "string"
                                },
                                "group": {
                                  "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "labelSelector": {
                                  "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name to match resources with.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace to select resources from.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "patch"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "releaseName": {
              "description": "ReleaseName used for the Helm release. Defaults to a composition of\n'[TargetNamespace-]Name'.",
              "maxLength": 53,
              "minLength": 1,
              "type": "string"
            },
            "rollback": {
              "description": "Rollback holds the configuration for Helm rollback actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nrollback action when it fails.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "recreate": {
                  "description": "Recreate performs pod restarts for the resource if applicable.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm rollback action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this HelmRelease.",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace used for the Helm storage.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend reconciliation for this HelmRelease,\nit does not apply to already started reconciliations. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace to target when performing operations for the HelmRelease.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "test": {
              "description": "Test holds the configuration for Helm test actions for this HelmRelease.",
              "properties": {
                "enable": {
                  "description": "Enable enables Helm test actions for this HelmRelease after an Helm install\nor upgrade action has been performed.",
                  "type": "boolean"
                },
                "filters": {
                  "description": "Filters is a list of tests to run or exclude from running.",
                  "items": {
                    "description": "Filter holds the configuration for individual Helm test filters.",
                    "properties": {
                      "exclude": {
                        "description": "Exclude specifies whether the named test should be excluded.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name is the name of the test.",
                        "maxLength": 253,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "ignoreFailures": {
                  "description": "IgnoreFailures tells the controller to skip remediation when the Helm tests\nare run but fail. Can be overwritten for tests run after install or upgrade\nactions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation during\nthe performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs\nfor hooks) during the performance of a Helm action. Defaults to '5m0s'.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "uninstall": {
              "description": "Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.",
              "properties": {
                "deletionPropagation": {
                  "default": "background",
                  "description": "DeletionPropagation specifies the deletion propagation policy when\na Helm uninstall is performed.",
                  "enum": [
                    "background",
                    "foreground",
                    "orphan"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables waiting for all the resources to be deleted after\na Helm uninstall is performed.",
                  "type": "boolean"
                },
                "keepHistory": {
                  "description": "KeepHistory tells Helm to remove all associated resources and mark the\nrelease as deleted, but retain the release history.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm uninstall action. Defaults\nto 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "upgrade": {
              "description": "Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nupgrade action when it fails.",
                  "type": "boolean"
                },
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Skip` and if omitted\nCRDs are neither installed nor upgraded.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are not applied during Helm upgrade action. With this\noption users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm upgrade action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm upgrade action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableSchemaValidation": {
                  "description": "DisableSchemaValidation prevents the Helm upgrade action from validating\nthe values against the JSON Schema.",
                  "type": "boolean"
                },
                "disableTakeOwnership": {
                  "description": "DisableTakeOwnership disables taking ownership of existing resources\nduring the Helm upgrade action. Defaults to false.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "preserveValues": {
                  "description": "PreserveValues will make Helm reuse the last release's values and merge in\noverrides from 'Values'. Setting this flag makes the HelmRelease\nnon-declarative.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm upgrade\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an upgrade action but fail.\nDefaults to 'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false' unless 'Retries' is greater than 0.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using 'Strategy', is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    },
                    "strategy": {
                      "description": "Strategy to use for failure remediation. Defaults to 'rollback'.",
                      "enum": [
                        "rollback",
                        "uninstall"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm upgrade action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "values": {
              "description": "Values holds the values for this Helm release.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "valuesFrom": {
              "description": "ValuesFrom holds references to resources containing Helm values for this HelmRelease,\nand information about how they should be merged.",
              "items": {
                "description": "ValuesReference contains a reference to a resource containing Helm values,\nand optionally the key they can be found at.",
                "properties": {
                  "kind": {
                    "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                    "enum": [
                      "Secret",
                      "ConfigMap"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "optional": {
                    "description": "Optional marks this ValuesReference as optional. When set, a not found error\nfor the values reference is ignored, but any ValuesKey, TargetPath or\ntransient error will still result in a reconciliation failure.",
                    "type": "boolean"
                  },
                  "targetPath": {
                    "description": "TargetPath is the YAML dot notation path the value should be merged at. When\nset, the ValuesKey is expected to be a single flat value. Defaults to 'None',\nwhich results in the values getting merged at the root.",
                    "maxLength": 250,
                    "pattern": "^([a-zA-Z0-9_\\-.\\\\\\/]|\\[[0-9]{1,5}\\])+$",
                    "type": "string"
                  },
                  "valuesKey": {
                    "description": "ValuesKey is the data key where the values.yaml or a specific value can be\nfound at. Defaults to 'values.yaml'.",
                    "maxLength": 253,
                    "pattern": "^[\\-._a-zA-Z0-9]+$",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "interval"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "either chart or chartRef must be set",
              "rule": "(has(self.chart) && !has(self.chartRef)) || (!has(self.chart) && has(self.chartRef))"
            }
          ],
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmReleaseStatus defines the observed state of a HelmRelease.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRelease.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "failures": {
              "description": "Failures is the reconciliation failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "helmChart": {
              "description": "HelmChart is the namespaced name of the HelmChart resource created by\nthe controller for the HelmRelease.",
              "type": "string"
            },
            "history": {
              "description": "History holds the history of Helm releases performed for this HelmRelease\nup to the last successfully completed release.",
              "items": {
                "description": "Snapshot captures a point-in-time copy of the status information for a Helm release,\nas managed by the controller.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion is the API version of the Snapshot.\nProvisional: when the calculation method of the Digest field is changed,\nthis field will be used to distinguish between the old and new methods.",
                    "type": "string"
                  },
                  "appVersion": {
                    "description": "AppVersion is the chart app version of the release object in storage.",
                    "type": "string"
                  },
                  "chartName": {
                    "description": "ChartName is the chart name of the release object in storage.",
                    "type": "string"
                  },
                  "chartVersion": {
                    "description": "ChartVersion is the chart version of the release object in\nstorage.",
                    "type": "string"
                  },
                  "configDigest": {
                    "description": "ConfigDigest is the checksum of the config (better known as\n\"values\") of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "deleted": {
                    "description": "Deleted is when the release was deleted.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "digest": {
                    "description": "Digest is the checksum of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "firstDeployed": {
                    "description": "FirstDeployed is when the release was first deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "lastDeployed": {
                    "description": "LastDeployed is when the release was last deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the release.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace is the namespace the release is deployed to.",
                    "type": "string"
                  },
                  "ociDigest": {
                    "description": "OCIDigest is the digest of the OCI artifact associated with the release.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the current state of the release.",
                    "type": "string"
                  },
                  "testHooks": {
                    "additionalProperties": {
                      "description": "TestHookStatus holds the status information for a test hook as observed\nto be run by the controller.",
                      "properties": {
                        "lastCompleted": {
                          "description": "LastCompleted is the time the test hook last completed.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "lastStarted": {
                          "description": "LastStarted is the time the test hook was last started.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase the test hook was observed to be in.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "description": "TestHooks is the list of test hooks for the release as observed to be\nrun by the controller.",
                    "type": "object"
                  },
                  "version": {
                    "description": "Version is the version of the release object in storage.",
                    "type": "integer"
                  }
                },
                "required": [
                  "chartName",
                  "chartVersion",
                  "configDigest",
                  "digest",
                  "firstDeployed",
                  "lastDeployed",
                  "name",
                  "namespace",
                  "status",
                  "version"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "installFailures": {
              "description": "InstallFailures is the install failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "lastAttemptedConfigDigest": {
              "description": "LastAttemptedConfigDigest is the digest for the config (better known as\n\"values\") of the last reconciliation attempt.",
              "type": "string"
            },
            "lastAttemptedGeneration": {
              "description": "LastAttemptedGeneration is the last generation the controller attempted\nto reconcile.",
              "format": "int64",
              "type": "integer"
            },
            "lastAttemptedReleaseAction": {
              "description": "LastAttemptedReleaseAction is the last release action performed for this\nHelmRelease. It is used to determine the active remediation strategy.",
              "enum": [
                "install",
                "upgrade"
              ],
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the Source revision of the last reconciliation\nattempt. For OCIRepository  sources, the 12 first characters of the digest are\nappended to the chart version e.g. \"1.2.3+1234567890ab\".",
              "type": "string"
            },
            "lastAttemptedRevisionDigest": {
              "description": "LastAttemptedRevisionDigest is the digest of the last reconciliation attempt.\nThis is only set for OCIRepository sources.",
              "type": "string"
            },
            "lastAttemptedValuesChecksum": {
              "description": "LastAttemptedValuesChecksum is the SHA1 checksum for the values of the last\nreconciliation attempt.\nDeprecated: Use LastAttemptedConfigDigest instead.",
              "type": "string"
            },
            "lastHandledForceAt": {
              "description": "LastHandledForceAt holds the value of the most recent force request\nvalue, so a change of the annotation value can be detected.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastHandledResetAt": {
              "description": "LastHandledResetAt holds the value of the most recent reset request\nvalue, so a change of the annotation value can be detected.",
              "type": "string"
            },
            "lastReleaseRevision": {
              "description": "LastReleaseRevision is the revision of the last successful Helm release.\nDeprecated: Use History instead.",
              "type": "integer"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "observedPostRenderersDigest": {
              "description": "ObservedPostRenderersDigest is the digest for the post-renderers of\nthe last successful reconciliation attempt.",
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace is the namespace of the Helm release storage for the\ncurrent release.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "upgradeFailures": {
              "description": "UpgradeFailures is the upgrade failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "helm.toolkit.fluxcd.io.v2beta1.HelmRelease": {
      "description": "HelmRelease is the Schema for the helmreleases API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "helm.toolkit.fluxcd.io/v2beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRelease"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmReleaseSpec defines the desired state of a Helm release.",
          "properties": {
            "chart": {
              "description": "Chart defines the template of the v1beta2.HelmChart that should be created\nfor this HelmRelease.",
              "properties": {
                "metadata": {
                  "description": "ObjectMeta holds the template for metadata like labels and annotations.",
                  "properties": {
                    "annotations": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/",
                      "type": "object"
                    },
                    "labels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "spec": {
                  "description": "Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.",
                  "properties": {
                    "chart": {
                      "description": "The name or path the Helm chart is available at in the SourceRef.",
                      "type": "string"
                    },
                    "interval": {
                      "description": "Interval at which to check the v1beta2.Source for updates. Defaults to\n'HelmReleaseSpec.Interval'.",
                      "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                      "type": "string"
                    },
                    "reconcileStrategy": {
                      "default": "ChartVersion",
                      "description": "Determines what enables the creation of a new artifact. Valid values are\n('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
                      "enum": [
                        "ChartVersion",
                        "Revision"
                      ],
                      "type": "string"
                    },
                    "sourceRef": {
                      "description": "The name and namespace of the v1beta2.Source the chart is available at.",
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion of the referent.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referent.",
                          "enum": [
                            "HelmRepository",
                            "GitRepository",
                            "Bucket"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent.",
                          "maxLength": 253,
                          "minLength": 1,
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referent.",
                          "maxLength": 63,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "valuesFile": {
                      "description": "Alternative values file to use as the default chart values, expected to\nbe a relative path in the SourceRef. Deprecated in favor of ValuesFiles,\nfor backwards compatibility the file defined here is merged before the\nValuesFiles items. Ignored when omitted.",
                      "type": "string"
                    },
                    "valuesFiles": {
                      "description": "Alternative list of values files to use as the chart values (values.yaml\nis not included by default), expected to be a relative path in the SourceRef.\nValues files are merged in the order of this list with the last file overriding\nthe first. Ignored when omitted.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "verify": {
                      "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported for OCI sources.\nChart dependencies, which are not bundled in the umbrella chart artifact, are not verified.",
                      "properties": {
                        "provider": {
                          "default": "cosign",
                          "description": "Provider specifies the technology used to sign the OCI Helm chart.",
                          "enum": [
                            "cosign"
                          ],
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "provider"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "version": {
                      "default": "*",
                      "description": "Version semver expression, ignored for charts from v1beta2.GitRepository and\nv1beta2.Bucket sources. Defaults to latest when omitted.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "chart",
                    "sourceRef"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "spec"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "chartRef": {
              "description": "ChartRef holds a reference to a source controller resource containing the\nHelm chart artifact.\n\nNote: this field is provisional to the v2 API, and not actively used\nby v2beta1 HelmReleases.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.",
                  "enum": [
                    "OCIRepository",
                    "HelmChart"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "maxLength": 253,
                  "minLength": 1,
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes\nresource object that contains the reference.",
                  "maxLength": 63,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice with\nreferences to HelmRelease resources that must be ready before this HelmRelease\ncan be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "driftDetection": {
              "description": "DriftDetection holds the configuration for detecting and handling\ndifferences between the manifest in the Helm storage and the resources\ncurrently existing in the cluster.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "properties": {
                "ignore": {
                  "description": "Ignore contains a list of rules for specifying which changes to ignore\nduring diffing.",
                  "items": {
                    "description": "IgnoreRule defines a rule to selectively disregard specific changes during\nthe drift detection process.",
                    "properties": {
                      "paths": {
                        "description": "Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from\nconsideration in a Kubernetes object.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "target": {
                        "description": "Target is a selector for specifying Kubernetes objects to which this\nrule applies.\nIf Target is not set, the Paths will be ignored for all Kubernetes\nobjects within the manifest of the Helm release.",
                        "properties": {
                          "annotationSelector": {
                            "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                            "type": "string"
                          },
                          "group": {
                            "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "labelSelector": {
                            "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name to match resources with.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace to select resources from.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "mode": {
                  "description": "Mode defines how differences should be handled between the Helm manifest\nand the manifest currently applied to the cluster.\nIf not explicitly set, it defaults to DiffModeDisabled.",
                  "enum": [
                    "enabled",
                    "warn",
                    "disabled"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "install": {
              "description": "Install holds the configuration for Helm install actions for this HelmRelease.",
              "properties": {
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Create` and if omitted\nCRDs are installed but not updated.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are applied (installed) during Helm install action.\nWith this option users can opt-in to CRD replace existing CRDs on Helm\ninstall actions, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "createNamespace": {
                  "description": "CreateNamespace tells the Helm install action to create the\nHelmReleaseSpec.TargetNamespace if it does not exist yet.\nOn uninstall, the namespace will not be garbage collected.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm install action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm install action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm install\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an install action but fail. Defaults to\n'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false'.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using an uninstall, is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "replace": {
                  "description": "Replace tells the Helm install action to re-use the 'ReleaseName', but only\nif that name is a deleted release which remains in the history.",
                  "type": "boolean"
                },
                "skipCRDs": {
                  "description": "SkipCRDs tells the Helm install action to not install any CRDs. By default,\nCRDs are installed if not already present.\n\nDeprecated use CRD policy (`crds`) attribute with value `Skip` instead.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm install action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval at which to reconcile the Helm release.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "kubeConfig": {
              "description": "KubeConfig for reconciling the HelmRelease on a remote cluster.\nWhen used in combination with HelmReleaseSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when HelmReleaseSpec.ServiceAccountName\nis empty.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret, when not specified an implementation-specific default key is used.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "maxHistory": {
              "description": "MaxHistory is the number of revisions saved by Helm for this HelmRelease.\nUse '0' for an unlimited number of revisions; defaults to '10'.",
              "type": "integer"
            },
            "persistentClient": {
              "description": "PersistentClient tells the controller to use a persistent Kubernetes\nclient for this release. When enabled, the client will be reused for the\nduration of the reconciliation, instead of being created and destroyed\nfor each (step of a) Helm action.\n\nThis can improve performance, but may cause issues with some Helm charts\nthat for example do create Custom Resource Definitions during installation\noutside Helm's CRD lifecycle hooks, which are then not observed to be\navailable by e.g. post-install hooks.\n\nIf not set, it defaults to true.",
              "type": "boolean"
            },
            "postRenderers": {
              "description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order\nof their definition.",
              "items": {
                "description": "PostRenderer contains a Helm PostRenderer specification.",
                "properties": {
                  "kustomize": {
                    "description": "Kustomization to apply as PostRenderer.",
                    "properties": {
                      "images": {
                        "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
                        "items": {
                          "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                          "properties": {
                            "digest": {
                              "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is a tag-less image name.",
                              "type": "string"
                            },
                            "newName": {
                              "description": "NewName is the value used to replace the original name.",
                              "type": "string"
                            },
                            "newTag": {
                              "description": "NewTag is the value used to replace the original tag.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patches": {
                        "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
                        "items": {
                          "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                          "properties": {
                            "patch": {
                              "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                              "type": "string"
                            },
                            "target": {
                              "description": "Target points to the resources that the patch document should be applied to.",
                              "properties": {
                                "annotationSelector": {
                                  "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                                  "type": "string"
                                },
                                "group": {
                                  "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "labelSelector": {
                                  "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name to match resources with.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace to select resources from.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "patch"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patchesJson6902": {
                        "description": "JSON 6902 patches, defined as inline YAML objects.",
                        "items": {
                          "description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.",
                          "properties": {
                            "patch": {
                              "description": "Patch contains the JSON6902 patch document with an array of operation objects.",
                              "items": {
                                "description": "JSON6902 is a JSON6902 operation object.\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                                "properties": {
                                  "from": {
                                    "description": "From contains a JSON-pointer value that references a location within the target document where the operation is\nperformed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                                    "type": "string"
                                  },
                                  "op": {
                                    "description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or\n\"test\".\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                                    "enum": [
                                      "test",
                                      "remove",
                                      "add",
                                      "replace",
                                      "move",
                                      "copy"
                                    ],
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path contains the JSON-pointer value that references a location within the target document where the operation\nis performed. The meaning of the value depends on the value of Op.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into\naccount by all operations.",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                },
                                "required": [
                                  "op",
                                  "path"
                                ],
                                "type": "object",
                                "additionalProperties": false
                              },
                              "type": "array"
                            },
                            "target": {
                              "description": "Target points to the resources that the patch document should be applied to.",
                              "properties": {
                                "annotationSelector": {
                                  "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                                  "type": "string"
                                },
                                "group": {
                                  "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "labelSelector": {
                                  "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name to match resources with.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace to select resources from.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "patch",
                            "target"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patchesStrategicMerge": {
                        "description": "Strategic merge patches, defined as inline YAML objects.",
                        "items": {
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "releaseName": {
              "description": "ReleaseName used for the Helm release. Defaults to a composition of\n'[TargetNamespace-]Name'.",
              "maxLength": 53,
              "minLength": 1,
              "type": "string"
            },
            "rollback": {
              "description": "Rollback holds the configuration for Helm rollback actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nrollback action when it fails.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "recreate": {
                  "description": "Recreate performs pod restarts for the resource if applicable.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm rollback action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this HelmRelease.",
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace used for the Helm storage.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend reconciliation for this HelmRelease,\nit does not apply to already started reconciliations. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace to target when performing operations for the HelmRelease.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "test": {
              "description": "Test holds the configuration for Helm test actions for this HelmRelease.",
              "properties": {
                "enable": {
                  "description": "Enable enables Helm test actions for this HelmRelease after an Helm install\nor upgrade action has been performed.",
                  "type": "boolean"
                },
                "ignoreFailures": {
                  "description": "IgnoreFailures tells the controller to skip remediation when the Helm tests\nare run but fail. Can be overwritten for tests run after install or upgrade\nactions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation during\nthe performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs\nfor hooks) during the performance of a Helm action. Defaults to '5m0s'.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "uninstall": {
              "description": "Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.",
              "properties": {
                "deletionPropagation": {
                  "default": "background",
                  "description": "DeletionPropagation specifies the deletion propagation policy when\na Helm uninstall is performed.",
                  "enum": [
                    "background",
                    "foreground",
                    "orphan"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables waiting for all the resources to be deleted after\na Helm uninstall is performed.",
                  "type": "boolean"
                },
                "keepHistory": {
                  "description": "KeepHistory tells Helm to remove all associated resources and mark the\nrelease as deleted, but retain the release history.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm uninstall action. Defaults\nto 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "upgrade": {
              "description": "Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nupgrade action when it fails.",
                  "type": "boolean"
                },
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Skip` and if omitted\nCRDs are neither installed nor upgraded.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are not applied during Helm upgrade action. With this\noption users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm upgrade action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm upgrade action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "preserveValues": {
                  "description": "PreserveValues will make Helm reuse the last release's values and merge in\noverrides from 'Values'. Setting this flag makes the HelmRelease\nnon-declarative.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm upgrade\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an upgrade action but fail.\nDefaults to 'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false' unless 'Retries' is greater than 0.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using 'Strategy', is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    },
                    "strategy": {
                      "description": "Strategy to use for failure remediation. Defaults to 'rollback'.",
                      "enum": [
                        "rollback",
                        "uninstall"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm upgrade action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "values": {
              "description": "Values holds the values for this Helm release.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "valuesFrom": {
              "description": "ValuesFrom holds references to resources containing Helm values for this HelmRelease,\nand information about how they should be merged.",
              "items": {
                "description": "ValuesReference contains a reference to a resource containing Helm values,\nand optionally the key they can be found at.",
                "properties": {
                  "kind": {
                    "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                    "enum": [
                      "Secret",
                      "ConfigMap"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "optional": {
                    "description": "Optional marks this ValuesReference as optional. When set, a not found error\nfor the values reference is ignored, but any ValuesKey, TargetPath or\ntransient error will still result in a reconciliation failure.",
                    "type": "boolean"
                  },
                  "targetPath": {
                    "description": "TargetPath is the YAML dot notation path the value should be merged at. When\nset, the ValuesKey is expected to be a single flat value. Defaults to 'None',\nwhich results in the values getting merged at the root.",
                    "maxLength": 250,
                    "pattern": "^([a-zA-Z0-9_\\-.\\\\\\/]|\\[[0-9]{1,5}\\])+$",
                    "type": "string"
                  },
                  "valuesKey": {
                    "description": "ValuesKey is the data key where the values.yaml or a specific value can be\nfound at. Defaults to 'values.yaml'.\nWhen set, must be a valid Data Key, consisting of alphanumeric characters,\n'-', '_' or '.'.",
                    "maxLength": 253,
                    "pattern": "^[\\-._a-zA-Z0-9]+$",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "chart",
            "interval"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmReleaseStatus defines the observed state of a HelmRelease.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRelease.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "failures": {
              "description": "Failures is the reconciliation failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "helmChart": {
              "description": "HelmChart is the namespaced name of the HelmChart resource created by\nthe controller for the HelmRelease.",
              "type": "string"
            },
            "history": {
              "description": "History holds the history of Helm releases performed for this HelmRelease\nup to the last successfully completed release.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "items": {
                "description": "Snapshot captures a point-in-time copy of the status information for a Helm release,\nas managed by the controller.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion is the API version of the Snapshot.\nProvisional: when the calculation method of the Digest field is changed,\nthis field will be used to distinguish between the old and new methods.",
                    "type": "string"
                  },
                  "appVersion": {
                    "description": "AppVersion is the chart app version of the release object in storage.",
                    "type": "string"
                  },
                  "chartName": {
                    "description": "ChartName is the chart name of the release object in storage.",
                    "type": "string"
                  },
                  "chartVersion": {
                    "description": "ChartVersion is the chart version of the release object in\nstorage.",
                    "type": "string"
                  },
                  "configDigest": {
                    "description": "ConfigDigest is the checksum of the config (better known as\n\"values\") of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "deleted": {
                    "description": "Deleted is when the release was deleted.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "digest": {
                    "description": "Digest is the checksum of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "firstDeployed": {
                    "description": "FirstDeployed is when the release was first deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "lastDeployed": {
                    "description": "LastDeployed is when the release was last deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the release.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace is the namespace the release is deployed to.",
                    "type": "string"
                  },
                  "ociDigest": {
                    "description": "OCIDigest is the digest of the OCI artifact associated with the release.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the current state of the release.",
                    "type": "string"
                  },
                  "testHooks": {
                    "additionalProperties": {
                      "description": "TestHookStatus holds the status information for a test hook as observed\nto be run by the controller.",
                      "properties": {
                        "lastCompleted": {
                          "description": "LastCompleted is the time the test hook last completed.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "lastStarted": {
                          "description": "LastStarted is the time the test hook was last started.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase the test hook was observed to be in.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "description": "TestHooks is the list of test hooks for the release as observed to be\nrun by the controller.",
                    "type": "object"
                  },
                  "version": {
                    "description": "Version is the version of the release object in storage.",
                    "type": "integer"
                  }
                },
                "required": [
                  "chartName",
                  "chartVersion",
                  "configDigest",
                  "digest",
                  "firstDeployed",
                  "lastDeployed",
                  "name",
                  "namespace",
                  "status",
                  "version"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "installFailures": {
              "description": "InstallFailures is the install failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "lastAppliedRevision": {
              "description": "LastAppliedRevision is the revision of the last successfully applied source.",
              "type": "string"
            },
            "lastAttemptedConfigDigest": {
              "description": "LastAttemptedConfigDigest is the digest for the config (better known as\n\"values\") of the last reconciliation attempt.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "type": "string"
            },
            "lastAttemptedGeneration": {
              "description": "LastAttemptedGeneration is the last generation the controller attempted\nto reconcile.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "format": "int64",
              "type": "integer"
            },
            "lastAttemptedReleaseAction": {
              "description": "LastAttemptedReleaseAction is the last release action performed for this\nHelmRelease. It is used to determine the active remediation strategy.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the revision of the last reconciliation attempt.",
              "type": "string"
            },
            "lastAttemptedValuesChecksum": {
              "description": "LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last\nreconciliation attempt.",
              "type": "string"
            },
            "lastHandledForceAt": {
              "description": "LastHandledForceAt holds the value of the most recent force request\nvalue, so a change of the annotation value can be detected.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastHandledResetAt": {
              "description": "LastHandledResetAt holds the value of the most recent reset request\nvalue, so a change of the annotation value can be detected.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "type": "string"
            },
            "lastReleaseRevision": {
              "description": "LastReleaseRevision is the revision of the last successful Helm release.",
              "type": "integer"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "observedPostRenderersDigest": {
              "description": "ObservedPostRenderersDigest is the digest for the post-renderers of\nthe last successful reconciliation attempt.",
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace is the namespace of the Helm release storage for the\ncurrent release.\n\nNote: this field is provisional to the v2beta2 API, and not actively used\nby v2beta1 HelmReleases.",
              "type": "string"
            },
            "upgradeFailures": {
              "description": "UpgradeFailures is the upgrade failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "helm.toolkit.fluxcd.io.v2beta2.HelmRelease": {
      "description": "HelmRelease is the Schema for the helmreleases API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "helm.toolkit.fluxcd.io/v2beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRelease"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmReleaseSpec defines the desired state of a Helm release.",
          "properties": {
            "chart": {
              "description": "Chart defines the template of the v1beta2.HelmChart that should be created\nfor this HelmRelease.",
              "properties": {
                "metadata": {
                  "description": "ObjectMeta holds the template for metadata like labels and annotations.",
                  "properties": {
                    "annotations": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/",
                      "type": "object"
                    },
                    "labels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "spec": {
                  "description": "Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.",
                  "properties": {
                    "chart": {
                      "description": "The name or path the Helm chart is available at in the SourceRef.",
                      "maxLength": 2048,
                      "minLength": 1,
                      "type": "string"
                    },
                    "ignoreMissingValuesFiles": {
                      "description": "IgnoreMissingValuesFiles controls whether to silently ignore missing values files rather than failing.",
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval at which to check the v1.Source for updates. Defaults to\n'HelmReleaseSpec.Interval'.",
                      "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                      "type": "string"
                    },
                    "reconcileStrategy": {
                      "default": "ChartVersion",
                      "description": "Determines what enables the creation of a new artifact. Valid values are\n('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
                      "enum": [
                        "ChartVersion",
                        "Revision"
                      ],
                      "type": "string"
                    },
                    "sourceRef": {
                      "description": "The name and namespace of the v1.Source the chart is available at.",
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion of the referent.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referent.",
                          "enum": [
                            "HelmRepository",
                            "GitRepository",
                            "Bucket"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent.",
                          "maxLength": 253,
                          "minLength": 1,
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referent.",
                          "maxLength": 63,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "valuesFile": {
                      "description": "Alternative values file to use as the default chart values, expected to\nbe a relative path in the SourceRef. Deprecated in favor of ValuesFiles,\nfor backwards compatibility the file defined here is merged before the\nValuesFiles items. Ignored when omitted.",
                      "type": "string"
                    },
                    "valuesFiles": {
                      "description": "Alternative list of values files to use as the chart values (values.yaml\nis not included by default), expected to be a relative path in the SourceRef.\nValues files are merged in the order of this list with the last file overriding\nthe first. Ignored when omitted.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "verify": {
                      "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported for OCI sources.\nChart dependencies, which are not bundled in the umbrella chart artifact,\nare not verified.",
                      "properties": {
                        "provider": {
                          "default": "cosign",
                          "description": "Provider specifies the technology used to sign the OCI Helm chart.",
                          "enum": [
                            "cosign",
                            "notation"
                          ],
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "provider"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "version": {
                      "default": "*",
                      "description": "Version semver expression, ignored for charts from v1beta2.GitRepository and\nv1beta2.Bucket sources. Defaults to latest when omitted.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "chart",
                    "sourceRef"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "spec"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "chartRef": {
              "description": "ChartRef holds a reference to a source controller resource containing the\nHelm chart artifact.\n\nNote: this field is provisional to the v2 API, and not actively used\nby v2beta2 HelmReleases.",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.",
                  "enum": [
                    "OCIRepository",
                    "HelmChart"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "maxLength": 253,
                  "minLength": 1,
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes\nresource object that contains the reference.",
                  "maxLength": 63,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice with\nreferences to HelmRelease resources that must be ready before this HelmRelease\ncan be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "driftDetection": {
              "description": "DriftDetection holds the configuration for detecting and handling\ndifferences between the manifest in the Helm storage and the resources\ncurrently existing in the cluster.",
              "properties": {
                "ignore": {
                  "description": "Ignore contains a list of rules for specifying which changes to ignore\nduring diffing.",
                  "items": {
                    "description": "IgnoreRule defines a rule to selectively disregard specific changes during\nthe drift detection process.",
                    "properties": {
                      "paths": {
                        "description": "Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from\nconsideration in a Kubernetes object.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "target": {
                        "description": "Target is a selector for specifying Kubernetes objects to which this\nrule applies.\nIf Target is not set, the Paths will be ignored for all Kubernetes\nobjects within the manifest of the Helm release.",
                        "properties": {
                          "annotationSelector": {
                            "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                            "type": "string"
                          },
                          "group": {
                            "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          },
                          "labelSelector": {
                            "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name to match resources with.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace to select resources from.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "mode": {
                  "description": "Mode defines how differences should be handled between the Helm manifest\nand the manifest currently applied to the cluster.\nIf not explicitly set, it defaults to DiffModeDisabled.",
                  "enum": [
                    "enabled",
                    "warn",
                    "disabled"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "install": {
              "description": "Install holds the configuration for Helm install actions for this HelmRelease.",
              "properties": {
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Create` and if omitted\nCRDs are installed but not updated.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are applied (installed) during Helm install action.\nWith this option users can opt in to CRD replace existing CRDs on Helm\ninstall actions, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "createNamespace": {
                  "description": "CreateNamespace tells the Helm install action to create the\nHelmReleaseSpec.TargetNamespace if it does not exist yet.\nOn uninstall, the namespace will not be garbage collected.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm install action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm install action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\ninstall has been performed.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm install\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an install action but fail. Defaults to\n'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false'.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using an uninstall, is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "replace": {
                  "description": "Replace tells the Helm install action to re-use the 'ReleaseName', but only\nif that name is a deleted release which remains in the history.",
                  "type": "boolean"
                },
                "skipCRDs": {
                  "description": "SkipCRDs tells the Helm install action to not install any CRDs. By default,\nCRDs are installed if not already present.\n\nDeprecated use CRD policy (`crds`) attribute with value `Skip` instead.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm install action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval at which to reconcile the Helm release.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "kubeConfig": {
              "description": "KubeConfig for reconciling the HelmRelease on a remote cluster.\nWhen used in combination with HelmReleaseSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when HelmReleaseSpec.ServiceAccountName\nis empty.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret, when not specified an implementation-specific default key is used.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "maxHistory": {
              "description": "MaxHistory is the number of revisions saved by Helm for this HelmRelease.\nUse '0' for an unlimited number of revisions; defaults to '5'.",
              "type": "integer"
            },
            "persistentClient": {
              "description": "PersistentClient tells the controller to use a persistent Kubernetes\nclient for this release. When enabled, the client will be reused for the\nduration of the reconciliation, instead of being created and destroyed\nfor each (step of a) Helm action.\n\nThis can improve performance, but may cause issues with some Helm charts\nthat for example do create Custom Resource Definitions during installation\noutside Helm's CRD lifecycle hooks, which are then not observed to be\navailable by e.g. post-install hooks.\n\nIf not set, it defaults to true.",
              "type": "boolean"
            },
            "postRenderers": {
              "description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order\nof their definition.",
              "items": {
                "description": "PostRenderer contains a Helm PostRenderer specification.",
                "properties": {
                  "kustomize": {
                    "description": "Kustomization to apply as PostRenderer.",
                    "properties": {
                      "images": {
                        "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
                        "items": {
                          "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                          "properties": {
                            "digest": {
                              "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is a tag-less image name.",
                              "type": "string"
                            },
                            "newName": {
                              "description": "NewName is the value used to replace the original name.",
                              "type": "string"
                            },
                            "newTag": {
                              "description": "NewTag is the value used to replace the original tag.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patches": {
                        "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
                        "items": {
                          "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                          "properties": {
                            "patch": {
                              "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                              "type": "string"
                            },
                            "target": {
                              "description": "Target points to the resources that the patch document should be applied to.",
                              "properties": {
                                "annotationSelector": {
                                  "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                                  "type": "string"
                                },
                                "group": {
                                  "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "labelSelector": {
                                  "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name to match resources with.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace to select resources from.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "patch"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patchesJson6902": {
                        "description": "JSON 6902 patches, defined as inline YAML objects.\nDeprecated: use Patches instead.",
                        "items": {
                          "description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.",
                          "properties": {
                            "patch": {
                              "description": "Patch contains the JSON6902 patch document with an array of operation objects.",
                              "items": {
                                "description": "JSON6902 is a JSON6902 operation object.\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                                "properties": {
                                  "from": {
                                    "description": "From contains a JSON-pointer value that references a location within the target document where the operation is\nperformed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                                    "type": "string"
                                  },
                                  "op": {
                                    "description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or\n\"test\".\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                                    "enum": [
                                      "test",
                                      "remove",
                                      "add",
                                      "replace",
                                      "move",
                                      "copy"
                                    ],
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path contains the JSON-pointer value that references a location within the target document where the operation\nis performed. The meaning of the value depends on the value of Op.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into\naccount by all operations.",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                },
                                "required": [
                                  "op",
                                  "path"
                                ],
                                "type": "object",
                                "additionalProperties": false
                              },
                              "type": "array"
                            },
                            "target": {
                              "description": "Target points to the resources that the patch document should be applied to.",
                              "properties": {
                                "annotationSelector": {
                                  "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                                  "type": "string"
                                },
                                "group": {
                                  "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                },
                                "labelSelector": {
                                  "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name to match resources with.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace to select resources from.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "patch",
                            "target"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "patchesStrategicMerge": {
                        "description": "Strategic merge patches, defined as inline YAML objects.\nDeprecated: use Patches instead.",
                        "items": {
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "releaseName": {
              "description": "ReleaseName used for the Helm release. Defaults to a composition of\n'[TargetNamespace-]Name'.",
              "maxLength": 53,
              "minLength": 1,
              "type": "string"
            },
            "rollback": {
              "description": "Rollback holds the configuration for Helm rollback actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nrollback action when it fails.",
                  "type": "boolean"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nrollback has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "recreate": {
                  "description": "Recreate performs pod restarts for the resource if applicable.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm rollback action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this HelmRelease.",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace used for the Helm storage.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend reconciliation for this HelmRelease,\nit does not apply to already started reconciliations. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace to target when performing operations for the HelmRelease.\nDefaults to the namespace of the HelmRelease.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "test": {
              "description": "Test holds the configuration for Helm test actions for this HelmRelease.",
              "properties": {
                "enable": {
                  "description": "Enable enables Helm test actions for this HelmRelease after an Helm install\nor upgrade action has been performed.",
                  "type": "boolean"
                },
                "filters": {
                  "description": "Filters is a list of tests to run or exclude from running.",
                  "items": {
                    "description": "Filter holds the configuration for individual Helm test filters.",
                    "properties": {
                      "exclude": {
                        "description": "Exclude specifies whether the named test should be excluded.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name is the name of the test.",
                        "maxLength": 253,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "ignoreFailures": {
                  "description": "IgnoreFailures tells the controller to skip remediation when the Helm tests\nare run but fail. Can be overwritten for tests run after install or upgrade\nactions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation during\nthe performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs\nfor hooks) during the performance of a Helm action. Defaults to '5m0s'.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "uninstall": {
              "description": "Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.",
              "properties": {
                "deletionPropagation": {
                  "default": "background",
                  "description": "DeletionPropagation specifies the deletion propagation policy when\na Helm uninstall is performed.",
                  "enum": [
                    "background",
                    "foreground",
                    "orphan"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm rollback action.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables waiting for all the resources to be deleted after\na Helm uninstall is performed.",
                  "type": "boolean"
                },
                "keepHistory": {
                  "description": "KeepHistory tells Helm to remove all associated resources and mark the\nrelease as deleted, but retain the release history.",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm uninstall action. Defaults\nto 'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "upgrade": {
              "description": "Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail allows deletion of new resources created during the Helm\nupgrade action when it fails.",
                  "type": "boolean"
                },
                "crds": {
                  "description": "CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Skip` and if omitted\nCRDs are neither installed nor upgraded.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are not applied during Helm upgrade action. With this\noption users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions.",
                  "enum": [
                    "Skip",
                    "Create",
                    "CreateReplace"
                  ],
                  "type": "string"
                },
                "disableHooks": {
                  "description": "DisableHooks prevents hooks from running during the Helm upgrade action.",
                  "type": "boolean"
                },
                "disableOpenAPIValidation": {
                  "description": "DisableOpenAPIValidation prevents the Helm upgrade action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
                  "type": "boolean"
                },
                "disableWait": {
                  "description": "DisableWait disables the waiting for resources to be ready after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "disableWaitForJobs": {
                  "description": "DisableWaitForJobs disables waiting for jobs to complete after a Helm\nupgrade has been performed.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force forces resource updates through a replacement strategy.",
                  "type": "boolean"
                },
                "preserveValues": {
                  "description": "PreserveValues will make Helm reuse the last release's values and merge in\noverrides from 'Values'. Setting this flag makes the HelmRelease\nnon-declarative.",
                  "type": "boolean"
                },
                "remediation": {
                  "description": "Remediation holds the remediation configuration for when the Helm upgrade\naction for the HelmRelease fails. The default is to not perform any action.",
                  "properties": {
                    "ignoreTestFailures": {
                      "description": "IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an upgrade action but fail.\nDefaults to 'Test.IgnoreFailures'.",
                      "type": "boolean"
                    },
                    "remediateLastFailure": {
                      "description": "RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false' unless 'Retries' is greater than 0.",
                      "type": "boolean"
                    },
                    "retries": {
                      "description": "Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using 'Strategy', is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries.",
                      "type": "integer"
                    },
                    "strategy": {
                      "description": "Strategy to use for failure remediation. Defaults to 'rollback'.",
                      "enum": [
                        "rollback",
                        "uninstall"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "timeout": {
                  "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm upgrade action. Defaults to\n'HelmReleaseSpec.Timeout'.",
                  "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "values": {
              "description": "Values holds the values for this Helm release.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "valuesFrom": {
              "description": "ValuesFrom holds references to resources containing Helm values for this HelmRelease,\nand information about how they should be merged.",
              "items": {
                "description": "ValuesReference contains a reference to a resource containing Helm values,\nand optionally the key they can be found at.",
                "properties": {
                  "kind": {
                    "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                    "enum": [
                      "Secret",
                      "ConfigMap"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "optional": {
                    "description": "Optional marks this ValuesReference as optional. When set, a not found error\nfor the values reference is ignored, but any ValuesKey, TargetPath or\ntransient error will still result in a reconciliation failure.",
                    "type": "boolean"
                  },
                  "targetPath": {
                    "description": "TargetPath is the YAML dot notation path the value should be merged at. When\nset, the ValuesKey is expected to be a single flat value. Defaults to 'None',\nwhich results in the values getting merged at the root.",
                    "maxLength": 250,
                    "pattern": "^([a-zA-Z0-9_\\-.\\\\\\/]|\\[[0-9]{1,5}\\])+$",
                    "type": "string"
                  },
                  "valuesKey": {
                    "description": "ValuesKey is the data key where the values.yaml or a specific value can be\nfound at. Defaults to 'values.yaml'.",
                    "maxLength": 253,
                    "pattern": "^[\\-._a-zA-Z0-9]+$",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "interval"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "either chart or chartRef must be set",
              "rule": "(has(self.chart) && !has(self.chartRef)) || (!has(self.chart) && has(self.chartRef))"
            }
          ],
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmReleaseStatus defines the observed state of a HelmRelease.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRelease.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "failures": {
              "description": "Failures is the reconciliation failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "helmChart": {
              "description": "HelmChart is the namespaced name of the HelmChart resource created by\nthe controller for the HelmRelease.",
              "type": "string"
            },
            "history": {
              "description": "History holds the history of Helm releases performed for this HelmRelease\nup to the last successfully completed release.",
              "items": {
                "description": "Snapshot captures a point-in-time copy of the status information for a Helm release,\nas managed by the controller.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion is the API version of the Snapshot.\nProvisional: when the calculation method of the Digest field is changed,\nthis field will be used to distinguish between the old and new methods.",
                    "type": "string"
                  },
                  "appVersion": {
                    "description": "AppVersion is the chart app version of the release object in storage.",
                    "type": "string"
                  },
                  "chartName": {
                    "description": "ChartName is the chart name of the release object in storage.",
                    "type": "string"
                  },
                  "chartVersion": {
                    "description": "ChartVersion is the chart version of the release object in\nstorage.",
                    "type": "string"
                  },
                  "configDigest": {
                    "description": "ConfigDigest is the checksum of the config (better known as\n\"values\") of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "deleted": {
                    "description": "Deleted is when the release was deleted.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "digest": {
                    "description": "Digest is the checksum of the release object in storage.\nIt has the format of `<algo>:<checksum>`.",
                    "type": "string"
                  },
                  "firstDeployed": {
                    "description": "FirstDeployed is when the release was first deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "lastDeployed": {
                    "description": "LastDeployed is when the release was last deployed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the release.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace is the namespace the release is deployed to.",
                    "type": "string"
                  },
                  "ociDigest": {
                    "description": "OCIDigest is the digest of the OCI artifact associated with the release.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the current state of the release.",
                    "type": "string"
                  },
                  "testHooks": {
                    "additionalProperties": {
                      "description": "TestHookStatus holds the status information for a test hook as observed\nto be run by the controller.",
                      "properties": {
                        "lastCompleted": {
                          "description": "LastCompleted is the time the test hook last completed.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "lastStarted": {
                          "description": "LastStarted is the time the test hook was last started.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase the test hook was observed to be in.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "description": "TestHooks is the list of test hooks for the release as observed to be\nrun by the controller.",
                    "type": "object"
                  },
                  "version": {
                    "description": "Version is the version of the release object in storage.",
                    "type": "integer"
                  }
                },
                "required": [
                  "chartName",
                  "chartVersion",
                  "configDigest",
                  "digest",
                  "firstDeployed",
                  "lastDeployed",
                  "name",
                  "namespace",
                  "status",
                  "version"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "installFailures": {
              "description": "InstallFailures is the install failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            },
            "lastAppliedRevision": {
              "description": "LastAppliedRevision is the revision of the last successfully applied\nsource.\nDeprecated: the revision can now be found in the History.",
              "type": "string"
            },
            "lastAttemptedConfigDigest": {
              "description": "LastAttemptedConfigDigest is the digest for the config (better known as\n\"values\") of the last reconciliation attempt.",
              "type": "string"
            },
            "lastAttemptedGeneration": {
              "description": "LastAttemptedGeneration is the last generation the controller attempted\nto reconcile.",
              "format": "int64",
              "type": "integer"
            },
            "lastAttemptedReleaseAction": {
              "description": "LastAttemptedReleaseAction is the last release action performed for this\nHelmRelease. It is used to determine the active remediation strategy.",
              "enum": [
                "install",
                "upgrade"
              ],
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the Source revision of the last reconciliation\nattempt. For OCIRepository  sources, the 12 first characters of the digest are\nappended to the chart version e.g. \"1.2.3+1234567890ab\".",
              "type": "string"
            },
            "lastAttemptedRevisionDigest": {
              "description": "LastAttemptedRevisionDigest is the digest of the last reconciliation attempt.\nThis is only set for OCIRepository sources.",
              "type": "string"
            },
            "lastAttemptedValuesChecksum": {
              "description": "LastAttemptedValuesChecksum is the SHA1 checksum for the values of the last\nreconciliation attempt.\nDeprecated: Use LastAttemptedConfigDigest instead.",
              "type": "string"
            },
            "lastHandledForceAt": {
              "description": "LastHandledForceAt holds the value of the most recent force request\nvalue, so a change of the annotation value can be detected.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastHandledResetAt": {
              "description": "LastHandledResetAt holds the value of the most recent reset request\nvalue, so a change of the annotation value can be detected.",
              "type": "string"
            },
            "lastReleaseRevision": {
              "description": "LastReleaseRevision is the revision of the last successful Helm release.\nDeprecated: Use History instead.",
              "type": "integer"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "observedPostRenderersDigest": {
              "description": "ObservedPostRenderersDigest is the digest for the post-renderers of\nthe last successful reconciliation attempt.",
              "type": "string"
            },
            "storageNamespace": {
              "description": "StorageNamespace is the namespace of the Helm release storage for the\ncurrent release.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "upgradeFailures": {
              "description": "UpgradeFailures is the upgrade failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1.HelmRepository": {
      "description": "HelmRepository is the Schema for the helmrepositories API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmRepositorySpec specifies the required configuration to produce an\nArtifact for a Helm repository index YAML.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nregistry. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nIt takes precedence over the values specified in the Secret referred\nto by `.spec.secretRef`.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP container registry.\nThis field is only taken into account if the .spec.type field is set to 'oci'.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the HelmRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "passCredentials": {
              "description": "PassCredentials allows the credentials from the SecretRef to be passed\non to a host that does not match the host as defined in URL.\nThis may be required if the host of the advertised chart URLs in the\nindex differ from the defined URL.\nEnabling this should be done with caution, as it can potentially result\nin credentials getting stolen in a MITM-attack.",
              "type": "boolean"
            },
            "provider": {
              "default": "generic",
              "description": "Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.\nThis field is optional, and only taken into account if the .spec.type field is set to 'oci'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "aws",
                "azure",
                "gcp"
              ],
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials\nfor the HelmRepository.\nFor HTTP/S basic auth the secret must contain 'username' and 'password'\nfields.\nSupport for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'\nkeys is deprecated. Please use `.spec.certSecretRef` instead.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nHelmRepository.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout is used for the index fetch operation for an HTTPS helm repository,\nand for remote OCI Repository operations like pulling for an OCI helm\nchart by the associated HelmChart.\nIts default value is 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "type": {
              "description": "Type of the HelmRepository.\nWhen this field is set to  \"oci\", the URL field value must be prefixed with \"oci://\".",
              "enum": [
                "default",
                "oci"
              ],
              "type": "string"
            },
            "url": {
              "description": "URL of the Helm repository, a valid URL contains at least a protocol and\nhost.",
              "pattern": "^(http|https|oci)://.*$",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmRepositoryStatus records the observed state of the HelmRepository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful HelmRepository reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the HelmRepository\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nHelmRepositoryStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta1.HelmRepository": {
      "description": "HelmRepository is the Schema for the helmrepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmRepositorySpec defines the reference to a Helm repository.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an Access Control List for allowing cross-namespace references to this object.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "The interval at which to check the upstream for updates.",
              "type": "string"
            },
            "passCredentials": {
              "description": "PassCredentials allows the credentials from the SecretRef to be passed on to\na host that does not match the host as defined in URL.\nThis may be required if the host of the advertised chart URLs in the index\ndiffer from the defined URL.\nEnabling this should be done with caution, as it can potentially result in\ncredentials getting stolen in a MITM-attack.",
              "type": "boolean"
            },
            "secretRef": {
              "description": "The name of the secret containing authentication credentials for the Helm\nrepository.\nFor HTTP/S basic auth the secret must contain username and\npassword fields.\nFor TLS the secret must contain a certFile and keyFile, and/or\ncaFile fields.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "The timeout of index downloading, defaults to 60s.",
              "type": "string"
            },
            "url": {
              "description": "The Helm repository URL, a valid URL contains at least a protocol and host.",
              "type": "string"
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmRepositoryStatus defines the observed state of the HelmRepository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful repository sync.",
              "properties": {
                "checksum": {
                  "description": "Checksum is the SHA256 checksum of the artifact.",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of this\nartifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "path": {
                  "description": "Path is the relative file path of this artifact.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm\nchart version, etc.",
                  "type": "string"
                },
                "url": {
                  "description": "URL is the HTTP address of this artifact.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the download link for the last index fetched.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta2.HelmRepository": {
      "description": "HelmRepository is the Schema for the helmrepositories API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "HelmRepositorySpec specifies the required configuration to produce an\nArtifact for a Helm repository index YAML.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nregistry. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nIt takes precedence over the values specified in the Secret referred\nto by `.spec.secretRef`.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP container registry.\nThis field is only taken into account if the .spec.type field is set to 'oci'.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the HelmRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "passCredentials": {
              "description": "PassCredentials allows the credentials from the SecretRef to be passed\non to a host that does not match the host as defined in URL.\nThis may be required if the host of the advertised chart URLs in the\nindex differ from the defined URL.\nEnabling this should be done with caution, as it can potentially result\nin credentials getting stolen in a MITM-attack.",
              "type": "boolean"
            },
            "provider": {
              "default": "generic",
              "description": "Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.\nThis field is optional, and only taken into account if the .spec.type field is set to 'oci'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "aws",
                "azure",
                "gcp"
              ],
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing authentication credentials\nfor the HelmRepository.\nFor HTTP/S basic auth the secret must contain 'username' and 'password'\nfields.\nSupport for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'\nkeys is deprecated. Please use `.spec.certSecretRef` instead.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend the reconciliation of this\nHelmRepository.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout is used for the index fetch operation for an HTTPS helm repository,\nand for remote OCI Repository operations like pulling for an OCI helm\nchart by the associated HelmChart.\nIts default value is 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "type": {
              "description": "Type of the HelmRepository.\nWhen this field is set to  \"oci\", the URL field value must be prefixed with \"oci://\".",
              "enum": [
                "default",
                "oci"
              ],
              "type": "string"
            },
            "url": {
              "description": "URL of the Helm repository, a valid URL contains at least a protocol and\nhost.",
              "pattern": "^(http|https|oci)://.*$",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "HelmRepositoryStatus records the observed state of the HelmRepository.",
          "properties": {
            "artifact": {
              "description": "Artifact represents the last successful HelmRepository reconciliation.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the HelmRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the HelmRepository\nobject.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nHelmRepositoryStatus.Artifact data is recommended.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta1.ImagePolicy": {
      "description": "ImagePolicy is the Schema for the imagepolicies API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImagePolicy"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImagePolicySpec defines the parameters for calculating the\nImagePolicy",
          "properties": {
            "filterTags": {
              "description": "FilterTags enables filtering for only a subset of tags based on a set of\nrules. If no rules are provided, all the tags from the repository will be\nordered and compared.",
              "properties": {
                "extract": {
                  "description": "Extract allows a capture group to be extracted from the specified regular\nexpression pattern, useful before tag evaluation.",
                  "type": "string"
                },
                "pattern": {
                  "description": "Pattern specifies a regular expression pattern used to filter for image\ntags.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "imageRepositoryRef": {
              "description": "ImageRepositoryRef points at the object specifying the image\nbeing scanned",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "policy": {
              "description": "Policy gives the particulars of the policy to be followed in\nselecting the most recent image",
              "properties": {
                "alphabetical": {
                  "description": "Alphabetical set of rules to use for alphabetical ordering of the tags.",
                  "properties": {
                    "order": {
                      "default": "asc",
                      "description": "Order specifies the sorting order of the tags. Given the letters of the\nalphabet as tags, ascending order would select Z, and descending order\nwould select A.",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "numerical": {
                  "description": "Numerical set of rules to use for numerical ordering of the tags.",
                  "properties": {
                    "order": {
                      "default": "asc",
                      "description": "Order specifies the sorting order of the tags. Given the integer values\nfrom 0 to 9 as tags, ascending order would select 9, and descending order\nwould select 0.",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "semver": {
                  "description": "SemVer gives a semantic version range to check against the tags\navailable.",
                  "properties": {
                    "range": {
                      "description": "Range gives a semver range for the image tag; the highest\nversion within the range that's a tag yields the latest image.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "range"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "imageRepositoryRef",
            "policy"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImagePolicyStatus defines the observed state of ImagePolicy",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "latestImage": {
              "description": "LatestImage gives the first in the list of images scanned by\nthe image repository, when filtered and ordered according to\nthe policy.",
              "type": "string"
            },
            "observedGeneration": {
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta2.ImagePolicy": {
      "description": "ImagePolicy is the Schema for the imagepolicies API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImagePolicy"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImagePolicySpec defines the parameters for calculating the\nImagePolicy.",
          "properties": {
            "digestReflectionPolicy": {
              "default": "Never",
              "description": "DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.\n\nNever: The digest field will always be set to the empty string.\n\nIfNotPresent: The digest field will be set to the digest of the elected\nlatest image if the field is empty and the image did not change.\n\nAlways: The digest field will always be set to the digest of the elected\nlatest image.\n\nDefault: Never.",
              "enum": [
                "Always",
                "IfNotPresent",
                "Never"
              ],
              "type": "string"
            },
            "filterTags": {
              "description": "FilterTags enables filtering for only a subset of tags based on a set of\nrules. If no rules are provided, all the tags from the repository will be\nordered and compared.",
              "properties": {
                "extract": {
                  "description": "Extract allows a capture group to be extracted from the specified regular\nexpression pattern, useful before tag evaluation.",
                  "type": "string"
                },
                "pattern": {
                  "description": "Pattern specifies a regular expression pattern used to filter for image\ntags.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "imageRepositoryRef": {
              "description": "ImageRepositoryRef points at the object specifying the image\nbeing scanned",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval is the length of time to wait between\nrefreshing the digest of the latest tag when the\nreflection policy is set to \"Always\".\n\nDefaults to 10m.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "policy": {
              "description": "Policy gives the particulars of the policy to be followed in\nselecting the most recent image",
              "properties": {
                "alphabetical": {
                  "description": "Alphabetical set of rules to use for alphabetical ordering of the tags.",
                  "properties": {
                    "order": {
                      "default": "asc",
                      "description": "Order specifies the sorting order of the tags. Given the letters of the\nalphabet as tags, ascending order would select Z, and descending order\nwould select A.",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "numerical": {
                  "description": "Numerical set of rules to use for numerical ordering of the tags.",
                  "properties": {
                    "order": {
                      "default": "asc",
                      "description": "Order specifies the sorting order of the tags. Given the integer values\nfrom 0 to 9 as tags, ascending order would select 9, and descending order\nwould select 0.",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "semver": {
                  "description": "SemVer gives a semantic version range to check against the tags\navailable.",
                  "properties": {
                    "range": {
                      "description": "Range gives a semver range for the image tag; the highest\nversion within the range that's a tag yields the latest image.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "range"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "imageRepositoryRef",
            "policy"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "spec.interval is only accepted when spec.digestReflectionPolicy is set to 'Always'",
              "rule": "!has(self.interval) || (has(self.digestReflectionPolicy) && self.digestReflectionPolicy == 'Always')"
            },
            {
              "message": "spec.interval must be set when spec.digestReflectionPolicy is set to 'Always'",
              "rule": "has(self.interval) || !has(self.digestReflectionPolicy) || self.digestReflectionPolicy != 'Always'"
            }
          ],
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImagePolicyStatus defines the observed state of ImagePolicy",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "latestImage": {
              "description": "LatestImage gives the first in the list of images scanned by\nthe image repository, when filtered and ordered according to\nthe policy.\n\nDeprecated: Replaced by the composite \"latestRef\" field.",
              "type": "string"
            },
            "latestRef": {
              "description": "LatestRef gives the first in the list of images scanned by\nthe image repository, when filtered and ordered according\nto the policy.",
              "properties": {
                "digest": {
                  "description": "Digest is the image's digest.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the bare image's name.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag is the image's tag.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "tag"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "observedGeneration": {
              "format": "int64",
              "type": "integer"
            },
            "observedPreviousImage": {
              "description": "ObservedPreviousImage is the observed previous LatestImage. It is used\nto keep track of the previous and current images.\n\nDeprecated: Replaced by the composite \"observedPreviousRef\" field.",
              "type": "string"
            },
            "observedPreviousRef": {
              "description": "ObservedPreviousRef is the observed previous LatestRef. It is used\nto keep track of the previous and current images.",
              "properties": {
                "digest": {
                  "description": "Digest is the image's digest.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the bare image's name.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag is the image's tag.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "tag"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta1.ImageRepository": {
      "description": "ImageRepository is the Schema for the imagerepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImageRepositorySpec defines the parameters for scanning an image\nrepository, e.g., `fluxcd/flux`.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an ACL for allowing cross-namespace references\nto the ImageRepository object based on the caller's namespace labels.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a secret containing\neither or both of\n\n - a PEM-encoded client certificate (`certFile`) and private\n key (`keyFile`);\n - a PEM-encoded CA certificate (`caFile`)\n\n and whichever are supplied, will be used for connecting to the\n registry. The client cert and key are useful if you are\n authenticating with a certificate; the CA cert is useful if\n you are using a self-signed server certificate.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "exclusionList": {
              "description": "ExclusionList is a list of regex strings used to exclude certain tags\nfrom being stored in the database.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "image": {
              "description": "Image is the name of the image repository",
              "type": "string"
            },
            "interval": {
              "description": "Interval is the length of time to wait between\nscans of the image repository.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef can be given the name of a secret containing\ncredentials to use for the image registry. The secret should be\ncreated with `kubectl create secret docker-registry`, or the\nequivalent.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate\nthe image pull if the service account has attached pull secrets.",
              "maxLength": 253,
              "type": "string"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent image scans.\nIt does not apply to already started scans. Defaults to false.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout for image scanning.\nDefaults to 'Interval' duration.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            }
          },
          "required": [
            "image",
            "interval"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImageRepositoryStatus defines the observed state of ImageRepository",
          "properties": {
            "canonicalImageName": {
              "description": "CanonicalName is the name of the image repository with all the\nimplied bits made explicit; e.g., `docker.io/library/alpine`\nrather than `alpine`.",
              "type": "string"
            },
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastScanResult": {
              "description": "LastScanResult contains the number of fetched tags.",
              "properties": {
                "scanTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "tagCount": {
                  "type": "integer"
                }
              },
              "required": [
                "tagCount"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta2.ImageRepository": {
      "description": "ImageRepository is the Schema for the imagerepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImageRepositorySpec defines the parameters for scanning an image\nrepository, e.g., `fluxcd/flux`.",
          "properties": {
            "accessFrom": {
              "description": "AccessFrom defines an ACL for allowing cross-namespace references\nto the ImageRepository object based on the caller's namespace labels.",
              "properties": {
                "namespaceSelectors": {
                  "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
                  "items": {
                    "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "namespaceSelectors"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nregistry. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nNote: Support for the `caFile`, `certFile` and `keyFile` keys has\nbeen deprecated.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "exclusionList": {
              "default": [
                "^.*\\.sig$"
              ],
              "description": "ExclusionList is a list of regex strings used to exclude certain tags\nfrom being stored in the database.",
              "items": {
                "type": "string"
              },
              "maxItems": 25,
              "type": "array"
            },
            "image": {
              "description": "Image is the name of the image repository",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP container registry.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval is the length of time to wait between\nscans of the image repository.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "provider": {
              "default": "generic",
              "description": "The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "aws",
                "azure",
                "gcp"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the container registry.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "SecretRef can be given the name of a secret containing\ncredentials to use for the image registry. The secret should be\ncreated with `kubectl create secret docker-registry`, or the\nequivalent.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate\nthe image pull if the service account has attached pull secrets.",
              "maxLength": 253,
              "type": "string"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent image scans.\nIt does not apply to already started scans. Defaults to false.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout for image scanning.\nDefaults to 'Interval' duration.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            }
          },
          "required": [
            "image",
            "interval"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImageRepositoryStatus defines the observed state of ImageRepository",
          "properties": {
            "canonicalImageName": {
              "description": "CanonicalName is the name of the image repository with all the\nimplied bits made explicit; e.g., `docker.io/library/alpine`\nrather than `alpine`.",
              "type": "string"
            },
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastScanResult": {
              "description": "LastScanResult contains the number of fetched tags.",
              "properties": {
                "latestTags": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "scanTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "tagCount": {
                  "type": "integer"
                }
              },
              "required": [
                "tagCount"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "observedExclusionList": {
              "description": "ObservedExclusionList is a list of observed exclusion list. It reflects\nthe exclusion rules used for the observed scan result in\nspec.lastScanResult.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta1.ImageUpdateAutomation": {
      "description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageUpdateAutomation"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation",
          "properties": {
            "git": {
              "description": "GitSpec contains all the git-specific definitions. This is\ntechnically optional, but in practice mandatory until there are\nother kinds of source allowed.",
              "properties": {
                "checkout": {
                  "description": "Checkout gives the parameters for cloning the git repository,\nready to make changes. If not present, the `spec.ref` field from the\nreferenced `GitRepository` or its default will be used.",
                  "properties": {
                    "ref": {
                      "description": "Reference gives a branch, tag or commit to clone from the Git\nrepository.",
                      "properties": {
                        "branch": {
                          "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                          "type": "string"
                        },
                        "commit": {
                          "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                          "type": "string"
                        },
                        "semver": {
                          "description": "SemVer tag expression to check out, takes precedence over Tag.",
                          "type": "string"
                        },
                        "tag": {
                          "description": "Tag to check out, takes precedence over Branch.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "ref"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "commit": {
                  "description": "Commit specifies how to commit to the git repository.",
                  "properties": {
                    "author": {
                      "description": "Author gives the email and optionally the name to use as the\nauthor of commits.",
                      "properties": {
                        "email": {
                          "description": "Email gives the email to provide when making a commit.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name gives the name to provide when making a commit.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "messageTemplate": {
                      "description": "MessageTemplate provides a template for the commit message,\ninto which will be interpolated the details of the change made.",
                      "type": "string"
                    },
                    "signingKey": {
                      "description": "SigningKey provides the option to sign commits with a GPG key",
                      "properties": {
                        "secretRef": {
                          "description": "SecretRef holds the name to a secret that contains a 'git.asc' key\ncorresponding to the ASCII Armored file containing the GPG signing\nkeypair as the value. It must be in the same namespace as the\nImageUpdateAutomation.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "secretRef"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "push": {
                  "description": "Push specifies how and where to push commits made by the\nautomation. If missing, commits are pushed (back) to\n`.spec.checkout.branch` or its default.",
                  "properties": {
                    "branch": {
                      "description": "Branch specifies that commits should be pushed to the branch\nnamed. The branch is created using `.spec.checkout.branch` as the\nstarting point, if it doesn't already exist.",
                      "type": "string"
                    },
                    "options": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Options specifies the push options that are sent to the Git\nserver when performing a push operation. For details, see:\nhttps://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt",
                      "type": "object"
                    },
                    "refspec": {
                      "description": "Refspec specifies the Git Refspec to use for a push operation.\nIf both Branch and Refspec are provided, then the commit is pushed\nto the branch and also using the specified refspec.\nFor more details about Git Refspecs, see:\nhttps://git-scm.com/book/en/v2/Git-Internals-The-Refspec",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "commit"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval gives an lower bound for how often the automation\nrun should be attempted.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "sourceRef": {
              "description": "SourceRef refers to the resource giving access details\nto a git repository.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "kind": {
                  "default": "GitRepository",
                  "description": "Kind of the referent.",
                  "enum": [
                    "GitRepository"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to not run this automation, until\nit is unset (or set to false). Defaults to false.",
              "type": "boolean"
            },
            "update": {
              "default": {
                "strategy": "Setters"
              },
              "description": "Update gives the specification for how to update the files in\nthe repository. This can be left empty, to use the default\nvalue.",
              "properties": {
                "path": {
                  "description": "Path to the directory containing the manifests to be updated.\nDefaults to 'None', which translates to the root path\nof the GitRepositoryRef.",
                  "type": "string"
                },
                "strategy": {
                  "default": "Setters",
                  "description": "Strategy names the strategy to be used.",
                  "enum": [
                    "Setters"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "strategy"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastAutomationRunTime": {
              "description": "LastAutomationRunTime records the last time the controller ran\nthis automation through to completion (even if no updates were\nmade).",
              "format": "date-time",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastPushCommit": {
              "description": "LastPushCommit records the SHA1 of the last commit made by the\ncontroller, for this automation object",
              "type": "string"
            },
            "lastPushTime": {
              "description": "LastPushTime records the time of the last pushed change.",
              "format": "date-time",
              "type": "string"
            },
            "observedGeneration": {
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "image.toolkit.fluxcd.io.v1beta2.ImageUpdateAutomation": {
      "description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageUpdateAutomation"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation",
          "properties": {
            "git": {
              "description": "GitSpec contains all the git-specific definitions. This is\ntechnically optional, but in practice mandatory until there are\nother kinds of source allowed.",
              "properties": {
                "checkout": {
                  "description": "Checkout gives the parameters for cloning the git repository,\nready to make changes. If not present, the `spec.ref` field from the\nreferenced `GitRepository` or its default will be used.",
                  "properties": {
                    "ref": {
                      "description": "Reference gives a branch, tag or commit to clone from the Git\nrepository.",
                      "properties": {
                        "branch": {
                          "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                          "type": "string"
                        },
                        "commit": {
                          "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                          "type": "string"
                        },
                        "semver": {
                          "description": "SemVer tag expression to check out, takes precedence over Tag.",
                          "type": "string"
                        },
                        "tag": {
                          "description": "Tag to check out, takes precedence over Branch.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "ref"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "commit": {
                  "description": "Commit specifies how to commit to the git repository.",
                  "properties": {
                    "author": {
                      "description": "Author gives the email and optionally the name to use as the\nauthor of commits.",
                      "properties": {
                        "email": {
                          "description": "Email gives the email to provide when making a commit.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name gives the name to provide when making a commit.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "messageTemplate": {
                      "description": "MessageTemplate provides a template for the commit message,\ninto which will be interpolated the details of the change made.",
                      "type": "string"
                    },
                    "messageTemplateValues": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MessageTemplateValues provides additional values to be available to the\ntemplating rendering.",
                      "type": "object"
                    },
                    "signingKey": {
                      "description": "SigningKey provides the option to sign commits with a GPG key",
                      "properties": {
                        "secretRef": {
                          "description": "SecretRef holds the name to a secret that contains a 'git.asc' key\ncorresponding to the ASCII Armored file containing the GPG signing\nkeypair as the value. It must be in the same namespace as the\nImageUpdateAutomation.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "secretRef"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "push": {
                  "description": "Push specifies how and where to push commits made by the\nautomation. If missing, commits are pushed (back) to\n`.spec.checkout.branch` or its default.",
                  "properties": {
                    "branch": {
                      "description": "Branch specifies that commits should be pushed to the branch\nnamed. The branch is created using `.spec.checkout.branch` as the\nstarting point, if it doesn't already exist.",
                      "type": "string"
                    },
                    "options": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Options specifies the push options that are sent to the Git\nserver when performing a push operation. For details, see:\nhttps://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt",
                      "type": "object"
                    },
                    "refspec": {
                      "description": "Refspec specifies the Git Refspec to use for a push operation.\nIf both Branch and Refspec are provided, then the commit is pushed\nto the branch and also using the specified refspec.\nFor more details about Git Refspecs, see:\nhttps://git-scm.com/book/en/v2/Git-Internals-The-Refspec",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "commit"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "interval": {
              "description": "Interval gives an lower bound for how often the automation\nrun should be attempted.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "policySelector": {
              "description": "PolicySelector allows to filter applied policies based on labels.\nBy default includes all policies in namespace.",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "sourceRef": {
              "description": "SourceRef refers to the resource giving access details\nto a git repository.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "kind": {
                  "default": "GitRepository",
                  "description": "Kind of the referent.",
                  "enum": [
                    "GitRepository"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to not run this automation, until\nit is unset (or set to false). Defaults to false.",
              "type": "boolean"
            },
            "update": {
              "default": {
                "strategy": "Setters"
              },
              "description": "Update gives the specification for how to update the files in\nthe repository. This can be left empty, to use the default\nvalue.",
              "properties": {
                "path": {
                  "description": "Path to the directory containing the manifests to be updated.\nDefaults to 'None', which translates to the root path\nof the GitRepositoryRef.",
                  "type": "string"
                },
                "strategy": {
                  "default": "Setters",
                  "description": "Strategy names the strategy to be used.",
                  "enum": [
                    "Setters"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "strategy"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastAutomationRunTime": {
              "description": "LastAutomationRunTime records the last time the controller ran\nthis automation through to completion (even if no updates were\nmade).",
              "format": "date-time",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "lastPushCommit": {
              "description": "LastPushCommit records the SHA1 of the last commit made by the\ncontroller, for this automation object",
              "type": "string"
            },
            "lastPushTime": {
              "description": "LastPushTime records the time of the last pushed change.",
              "format": "date-time",
              "type": "string"
            },
            "observedGeneration": {
              "format": "int64",
              "type": "integer"
            },
            "observedPolicies": {
              "additionalProperties": {
                "description": "ImageRef represents an image reference.",
                "properties": {
                  "digest": {
                    "description": "Digest is the image's digest.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the bare image's name.",
                    "type": "string"
                  },
                  "tag": {
                    "description": "Tag is the image's tag.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "tag"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "description": "ObservedPolicies is the list of observed ImagePolicies that were\nconsidered by the ImageUpdateAutomation update process.",
              "type": "object"
            },
            "observedSourceRevision": {
              "description": "ObservedPolicies []ObservedPolicy `json:\"observedPolicies,omitempty\"`\nObservedSourceRevision is the last observed source revision. This can be\nused to determine if the source has been updated since last observation.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "kustomize.toolkit.fluxcd.io.v1.Kustomization": {
      "description": "Kustomization is the Schema for the kustomizations API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "kustomize.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Kustomization"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "KustomizationSpec defines the configuration to calculate the desired state\nfrom a Source using Kustomize.",
          "properties": {
            "commonMetadata": {
              "description": "CommonMetadata specifies the common labels and annotations that are\napplied to all resources. Any existing label or annotation will be\noverridden if its key matches a common one.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations to be added to the object's metadata.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels to be added to the object's metadata.",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "components": {
              "description": "Components specifies relative paths to specifications of other Components.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "decryption": {
              "description": "Decrypt Kubernetes secrets before applying them on the cluster.",
              "properties": {
                "provider": {
                  "description": "Provider is the name of the decryption engine.",
                  "enum": [
                    "sops"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "The secret name containing the private OpenPGP keys used for decryption.\nA static credential for a cloud provider defined inside the Secret\ntakes priority to secret-less authentication with the ServiceAccountName\nfield.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "serviceAccountName": {
                  "description": "ServiceAccountName is the name of the service account used to\nauthenticate with KMS services from cloud providers. If a\nstatic credential for a given cloud provider is defined\ninside the Secret referenced by SecretRef, that static\ncredential takes priority.",
                  "type": "string"
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "deletionPolicy": {
              "description": "DeletionPolicy can be used to control garbage collection when this\nKustomization is deleted. Valid values are ('MirrorPrune', 'Delete',\n'WaitForTermination', 'Orphan'). 'MirrorPrune' mirrors the Prune field\n(orphan if false, delete if true). Defaults to 'MirrorPrune'.",
              "enum": [
                "MirrorPrune",
                "Delete",
                "WaitForTermination",
                "Orphan"
              ],
              "type": "string"
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice\nwith references to Kustomization resources that must be ready before this\nKustomization can be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "force": {
              "default": false,
              "description": "Force instructs the controller to recreate resources\nwhen patching fails due to an immutable field change.",
              "type": "boolean"
            },
            "healthCheckExprs": {
              "description": "HealthCheckExprs is a list of healthcheck expressions for evaluating the\nhealth of custom resources using Common Expression Language (CEL).\nThe expressions are evaluated only when Wait or HealthChecks are specified.",
              "items": {
                "description": "CustomHealthCheck defines the health check for custom resources.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion of the custom resource under evaluation.",
                    "type": "string"
                  },
                  "current": {
                    "description": "Current is the CEL expression that determines if the status\nof the custom resource has reached the desired state.",
                    "type": "string"
                  },
                  "failed": {
                    "description": "Failed is the CEL expression that determines if the status\nof the custom resource has failed to reach the desired state.",
                    "type": "string"
                  },
                  "inProgress": {
                    "description": "InProgress is the CEL expression that determines if the status\nof the custom resource has not yet reached the desired state.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the custom resource under evaluation.",
                    "type": "string"
                  }
                },
                "required": [
                  "apiVersion",
                  "current",
                  "kind"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "healthChecks": {
              "description": "A list of resources to be included in the health assessment.",
              "items": {
                "description": "NamespacedObjectKindReference contains enough information to locate the typed referenced Kubernetes resource object\nin any namespace.",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent, if not specified the Kubernetes preferred version will be used.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "images": {
              "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
              "items": {
                "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                "properties": {
                  "digest": {
                    "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is a tag-less image name.",
                    "type": "string"
                  },
                  "newName": {
                    "description": "NewName is the value used to replace the original name.",
                    "type": "string"
                  },
                  "newTag": {
                    "description": "NewTag is the value used to replace the original tag.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "The interval at which to reconcile the Kustomization.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "kubeConfig": {
              "description": "The KubeConfig for reconciling the Kustomization on a remote cluster.\nWhen used in combination with KustomizationSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when KustomizationSpec.ServiceAccountName\nis empty.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret, when not specified an implementation-specific default key is used.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "namePrefix": {
              "description": "NamePrefix will prefix the names of all managed resources.",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "nameSuffix": {
              "description": "NameSuffix will suffix the names of all managed resources.",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "patches": {
              "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
              "items": {
                "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                "properties": {
                  "patch": {
                    "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                    "type": "string"
                  },
                  "target": {
                    "description": "Target points to the resources that the patch document should be applied to.",
                    "properties": {
                      "annotationSelector": {
                        "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to match resources with.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace to select resources from.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "patch"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "path": {
              "description": "Path to the directory containing the kustomization.yaml file, or the\nset of plain YAMLs a kustomization.yaml should be generated for.\nDefaults to 'None', which translates to the root path of the SourceRef.",
              "type": "string"
            },
            "postBuild": {
              "description": "PostBuild describes which actions to perform on the YAML manifest\ngenerated by building the kustomize overlay.",
              "properties": {
                "substitute": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Substitute holds a map of key/value pairs.\nThe variables defined in your YAML manifests that match any of the keys\ndefined in the map will be substituted with the set value.\nIncludes support for bash string replacement functions\ne.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.",
                  "type": "object"
                },
                "substituteFrom": {
                  "description": "SubstituteFrom holds references to ConfigMaps and Secrets containing\nthe variables and their values to be substituted in the YAML manifests.\nThe ConfigMap and the Secret data keys represent the var names, and they\nmust match the vars declared in the manifests for the substitution to\nhappen.",
                  "items": {
                    "description": "SubstituteReference contains a reference to a resource containing\nthe variables name and value.",
                    "properties": {
                      "kind": {
                        "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                        "enum": [
                          "Secret",
                          "ConfigMap"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                        "maxLength": 253,
                        "minLength": 1,
                        "type": "string"
                      },
                      "optional": {
                        "default": false,
                        "description": "Optional indicates whether the referenced resource must exist, or whether to\ntolerate its absence. If true and the referenced resource is absent, proceed\nas if the resource was present but empty, without any variables defined.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "prune": {
              "description": "Prune enables garbage collection.",
              "type": "boolean"
            },
            "retryInterval": {
              "description": "The interval at which to retry a previously failed reconciliation.\nWhen not specified, the controller uses the KustomizationSpec.Interval\nvalue to retry failures.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this Kustomization.",
              "type": "string"
            },
            "sourceRef": {
              "description": "Reference of the source where the kustomization file is.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.",
                  "enum": [
                    "OCIRepository",
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes\nresource object that contains the reference.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent kustomize executions,\nit does not apply to already started executions. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace sets or overrides the namespace in the\nkustomization.yaml file.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "timeout": {
              "description": "Timeout for validation, apply and health checking operations.\nDefaults to 'Interval' duration.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "wait": {
              "description": "Wait instructs the controller to check the health of all the reconciled\nresources. When enabled, the HealthChecks are ignored. Defaults to false.",
              "type": "boolean"
            }
          },
          "required": [
            "interval",
            "prune",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "KustomizationStatus defines the observed state of a kustomization.",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "inventory": {
              "description": "Inventory contains the list of Kubernetes resource object references that\nhave been successfully applied.",
              "properties": {
                "entries": {
                  "description": "Entries of Kubernetes resource object references.",
                  "items": {
                    "description": "ResourceRef contains the information necessary to locate a resource within a cluster.",
                    "properties": {
                      "id": {
                        "description": "ID is the string representation of the Kubernetes resource object's metadata,\nin the format '<namespace>_<name>_<group>_<kind>'.",
                        "type": "string"
                      },
                      "v": {
                        "description": "Version is the API version of the Kubernetes resource object's kind.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "v"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "entries"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "lastAppliedOriginRevision": {
              "description": "The last successfully applied origin revision.\nEquals the origin revision of the applied Artifact from the referenced Source.\nUsually present on the Metadata of the applied Artifact and depends on the\nSource type, e.g. for OCI it's the value associated with the key\n\"org.opencontainers.image.revision\".",
              "type": "string"
            },
            "lastAppliedRevision": {
              "description": "The last successfully applied revision.\nEquals the Revision of the applied Artifact from the referenced Source.",
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the revision of the last reconciliation attempt.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "kustomize.toolkit.fluxcd.io.v1beta1.Kustomization": {
      "description": "Kustomization is the Schema for the kustomizations API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "kustomize.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Kustomization"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "KustomizationSpec defines the desired state of a kustomization.",
          "properties": {
            "decryption": {
              "description": "Decrypt Kubernetes secrets before applying them on the cluster.",
              "properties": {
                "provider": {
                  "description": "Provider is the name of the decryption engine.",
                  "enum": [
                    "sops"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "The secret name containing the private OpenPGP keys used for decryption.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice\nwith references to Kustomization resources that must be ready before this\nKustomization can be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "force": {
              "default": false,
              "description": "Force instructs the controller to recreate resources\nwhen patching fails due to an immutable field change.",
              "type": "boolean"
            },
            "healthChecks": {
              "description": "A list of resources to be included in the health assessment.",
              "items": {
                "description": "NamespacedObjectKindReference contains enough information to locate the typed referenced Kubernetes resource object\nin any namespace.",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent, if not specified the Kubernetes preferred version will be used.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "images": {
              "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
              "items": {
                "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                "properties": {
                  "digest": {
                    "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is a tag-less image name.",
                    "type": "string"
                  },
                  "newName": {
                    "description": "NewName is the value used to replace the original name.",
                    "type": "string"
                  },
                  "newTag": {
                    "description": "NewTag is the value used to replace the original tag.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "The interval at which to reconcile the Kustomization.",
              "type": "string"
            },
            "kubeConfig": {
              "description": "The KubeConfig for reconciling the Kustomization on a remote cluster.\nWhen specified, KubeConfig takes precedence over ServiceAccountName.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name to a secret that contains a 'value' key with\nthe kubeconfig file as the value. It must be in the same namespace as\nthe Kustomization.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nthe Kustomization.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "patches": {
              "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
              "items": {
                "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                "properties": {
                  "patch": {
                    "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                    "type": "string"
                  },
                  "target": {
                    "description": "Target points to the resources that the patch document should be applied to.",
                    "properties": {
                      "annotationSelector": {
                        "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to match resources with.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace to select resources from.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "patch"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "patchesJson6902": {
              "description": "JSON 6902 patches, defined as inline YAML objects.",
              "items": {
                "description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.",
                "properties": {
                  "patch": {
                    "description": "Patch contains the JSON6902 patch document with an array of operation objects.",
                    "items": {
                      "description": "JSON6902 is a JSON6902 operation object.\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                      "properties": {
                        "from": {
                          "description": "From contains a JSON-pointer value that references a location within the target document where the operation is\nperformed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                          "type": "string"
                        },
                        "op": {
                          "description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or\n\"test\".\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                          "enum": [
                            "test",
                            "remove",
                            "add",
                            "replace",
                            "move",
                            "copy"
                          ],
                          "type": "string"
                        },
                        "path": {
                          "description": "Path contains the JSON-pointer value that references a location within the target document where the operation\nis performed. The meaning of the value depends on the value of Op.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into\naccount by all operations.",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      },
                      "required": [
                        "op",
                        "path"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "target": {
                    "description": "Target points to the resources that the patch document should be applied to.",
                    "properties": {
                      "annotationSelector": {
                        "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to match resources with.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace to select resources from.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "patch",
                  "target"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "patchesStrategicMerge": {
              "description": "Strategic merge patches, defined as inline YAML objects.",
              "items": {
                "x-kubernetes-preserve-unknown-fields": true
              },
              "type": "array"
            },
            "path": {
              "description": "Path to the directory containing the kustomization.yaml file, or the\nset of plain YAMLs a kustomization.yaml should be generated for.\nDefaults to 'None', which translates to the root path of the SourceRef.",
              "type": "string"
            },
            "postBuild": {
              "description": "PostBuild describes which actions to perform on the YAML manifest\ngenerated by building the kustomize overlay.",
              "properties": {
                "substitute": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Substitute holds a map of key/value pairs.\nThe variables defined in your YAML manifests\nthat match any of the keys defined in the map\nwill be substituted with the set value.\nIncludes support for bash string replacement functions\ne.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.",
                  "type": "object"
                },
                "substituteFrom": {
                  "description": "SubstituteFrom holds references to ConfigMaps and Secrets containing\nthe variables and their values to be substituted in the YAML manifests.\nThe ConfigMap and the Secret data keys represent the var names and they\nmust match the vars declared in the manifests for the substitution to happen.",
                  "items": {
                    "description": "SubstituteReference contains a reference to a resource containing\nthe variables name and value.",
                    "properties": {
                      "kind": {
                        "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                        "enum": [
                          "Secret",
                          "ConfigMap"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                        "maxLength": 253,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "prune": {
              "description": "Prune enables garbage collection.",
              "type": "boolean"
            },
            "retryInterval": {
              "description": "The interval at which to retry a previously failed reconciliation.\nWhen not specified, the controller uses the KustomizationSpec.Interval\nvalue to retry failures.",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this Kustomization.",
              "type": "string"
            },
            "sourceRef": {
              "description": "Reference of the source where the kustomization file is.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent",
                  "enum": [
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the Kustomization namespace",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent kustomize executions,\nit does not apply to already started executions. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace sets or overrides the namespace in the\nkustomization.yaml file.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "timeout": {
              "description": "Timeout for validation, apply and health checking operations.\nDefaults to 'Interval' duration.",
              "type": "string"
            },
            "validation": {
              "description": "Validate the Kubernetes objects before applying them on the cluster.\nThe validation strategy can be 'client' (local dry-run), 'server'\n(APIServer dry-run) or 'none'.\nWhen 'Force' is 'true', validation will fallback to 'client' if set to\n'server' because server-side validation is not supported in this scenario.",
              "enum": [
                "none",
                "client",
                "server"
              ],
              "type": "string"
            }
          },
          "required": [
            "interval",
            "prune",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "KustomizationStatus defines the observed state of a kustomization.",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastAppliedRevision": {
              "description": "The last successfully applied revision.\nThe revision format for Git sources is <branch|tag>/<commit-sha>.",
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the revision of the last reconciliation attempt.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            },
            "snapshot": {
              "description": "The last successfully applied revision metadata.",
              "properties": {
                "checksum": {
                  "description": "The manifests sha1 checksum.",
                  "type": "string"
                },
                "entries": {
                  "description": "A list of Kubernetes kinds grouped by namespace.",
                  "items": {
                    "description": "Snapshot holds the metadata of namespaced\nKubernetes objects",
                    "properties": {
                      "kinds": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "The list of Kubernetes kinds.",
                        "type": "object"
                      },
                      "namespace": {
                        "description": "The namespace of this entry.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "kinds"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "checksum",
                "entries"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "kustomize.toolkit.fluxcd.io.v1beta2.Kustomization": {
      "description": "Kustomization is the Schema for the kustomizations API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "kustomize.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Kustomization"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "KustomizationSpec defines the configuration to calculate the desired state from a Source using Kustomize.",
          "properties": {
            "commonMetadata": {
              "description": "CommonMetadata specifies the common labels and annotations that are applied to all resources.\nAny existing label or annotation will be overridden if its key matches a common one.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations to be added to the object's metadata.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels to be added to the object's metadata.",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "components": {
              "description": "Components specifies relative paths to specifications of other Components.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "decryption": {
              "description": "Decrypt Kubernetes secrets before applying them on the cluster.",
              "properties": {
                "provider": {
                  "description": "Provider is the name of the decryption engine.",
                  "enum": [
                    "sops"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "The secret name containing the private OpenPGP keys used for decryption.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "dependsOn": {
              "description": "DependsOn may contain a meta.NamespacedObjectReference slice\nwith references to Kustomization resources that must be ready before this\nKustomization can be reconciled.",
              "items": {
                "description": "NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any\nnamespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "force": {
              "default": false,
              "description": "Force instructs the controller to recreate resources\nwhen patching fails due to an immutable field change.",
              "type": "boolean"
            },
            "healthChecks": {
              "description": "A list of resources to be included in the health assessment.",
              "items": {
                "description": "NamespacedObjectKindReference contains enough information to locate the typed referenced Kubernetes resource object\nin any namespace.",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent, if not specified the Kubernetes preferred version will be used.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "images": {
              "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.",
              "items": {
                "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                "properties": {
                  "digest": {
                    "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is a tag-less image name.",
                    "type": "string"
                  },
                  "newName": {
                    "description": "NewName is the value used to replace the original name.",
                    "type": "string"
                  },
                  "newTag": {
                    "description": "NewTag is the value used to replace the original tag.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "interval": {
              "description": "The interval at which to reconcile the Kustomization.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "kubeConfig": {
              "description": "The KubeConfig for reconciling the Kustomization on a remote cluster.\nWhen used in combination with KustomizationSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when KustomizationSpec.ServiceAccountName\nis empty.",
              "properties": {
                "secretRef": {
                  "description": "SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret, when not specified an implementation-specific default key is used.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "secretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "patches": {
              "description": "Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors.",
              "items": {
                "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should\nbe applied to.",
                "properties": {
                  "patch": {
                    "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects.",
                    "type": "string"
                  },
                  "target": {
                    "description": "Target points to the resources that the patch document should be applied to.",
                    "properties": {
                      "annotationSelector": {
                        "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to match resources with.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace to select resources from.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "patch"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "patchesJson6902": {
              "description": "JSON 6902 patches, defined as inline YAML objects.\nDeprecated: Use Patches instead.",
              "items": {
                "description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.",
                "properties": {
                  "patch": {
                    "description": "Patch contains the JSON6902 patch document with an array of operation objects.",
                    "items": {
                      "description": "JSON6902 is a JSON6902 operation object.\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                      "properties": {
                        "from": {
                          "description": "From contains a JSON-pointer value that references a location within the target document where the operation is\nperformed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                          "type": "string"
                        },
                        "op": {
                          "description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or\n\"test\".\nhttps://datatracker.ietf.org/doc/html/rfc6902#section-4",
                          "enum": [
                            "test",
                            "remove",
                            "add",
                            "replace",
                            "move",
                            "copy"
                          ],
                          "type": "string"
                        },
                        "path": {
                          "description": "Path contains the JSON-pointer value that references a location within the target document where the operation\nis performed. The meaning of the value depends on the value of Op.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into\naccount by all operations.",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      },
                      "required": [
                        "op",
                        "path"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "target": {
                    "description": "Target points to the resources that the patch document should be applied to.",
                    "properties": {
                      "annotationSelector": {
                        "description": "AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to match resources with.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace to select resources from.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "patch",
                  "target"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "patchesStrategicMerge": {
              "description": "Strategic merge patches, defined as inline YAML objects.\nDeprecated: Use Patches instead.",
              "items": {
                "x-kubernetes-preserve-unknown-fields": true
              },
              "type": "array"
            },
            "path": {
              "description": "Path to the directory containing the kustomization.yaml file, or the\nset of plain YAMLs a kustomization.yaml should be generated for.\nDefaults to 'None', which translates to the root path of the SourceRef.",
              "type": "string"
            },
            "postBuild": {
              "description": "PostBuild describes which actions to perform on the YAML manifest\ngenerated by building the kustomize overlay.",
              "properties": {
                "substitute": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Substitute holds a map of key/value pairs.\nThe variables defined in your YAML manifests\nthat match any of the keys defined in the map\nwill be substituted with the set value.\nIncludes support for bash string replacement functions\ne.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.",
                  "type": "object"
                },
                "substituteFrom": {
                  "description": "SubstituteFrom holds references to ConfigMaps and Secrets containing\nthe variables and their values to be substituted in the YAML manifests.\nThe ConfigMap and the Secret data keys represent the var names and they\nmust match the vars declared in the manifests for the substitution to happen.",
                  "items": {
                    "description": "SubstituteReference contains a reference to a resource containing\nthe variables name and value.",
                    "properties": {
                      "kind": {
                        "description": "Kind of the values referent, valid values are ('Secret', 'ConfigMap').",
                        "enum": [
                          "Secret",
                          "ConfigMap"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
                        "maxLength": 253,
                        "minLength": 1,
                        "type": "string"
                      },
                      "optional": {
                        "default": false,
                        "description": "Optional indicates whether the referenced resource must exist, or whether to\ntolerate its absence. If true and the referenced resource is absent, proceed\nas if the resource was present but empty, without any variables defined.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "prune": {
              "description": "Prune enables garbage collection.",
              "type": "boolean"
            },
            "retryInterval": {
              "description": "The interval at which to retry a previously failed reconciliation.\nWhen not specified, the controller uses the KustomizationSpec.Interval\nvalue to retry failures.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling this Kustomization.",
              "type": "string"
            },
            "sourceRef": {
              "description": "Reference of the source where the kustomization file is.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.",
                  "enum": [
                    "OCIRepository",
                    "GitRepository",
                    "Bucket"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent kustomize executions,\nit does not apply to already started executions. Defaults to false.",
              "type": "boolean"
            },
            "targetNamespace": {
              "description": "TargetNamespace sets or overrides the namespace in the\nkustomization.yaml file.",
              "maxLength": 63,
              "minLength": 1,
              "type": "string"
            },
            "timeout": {
              "description": "Timeout for validation, apply and health checking operations.\nDefaults to 'Interval' duration.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "validation": {
              "description": "Deprecated: Not used in v1beta2.",
              "enum": [
                "none",
                "client",
                "server"
              ],
              "type": "string"
            },
            "wait": {
              "description": "Wait instructs the controller to check the health of all the reconciled resources.\nWhen enabled, the HealthChecks are ignored. Defaults to false.",
              "type": "boolean"
            }
          },
          "required": [
            "interval",
            "prune",
            "sourceRef"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "KustomizationStatus defines the observed state of a kustomization.",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "inventory": {
              "description": "Inventory contains the list of Kubernetes resource object references that have been successfully applied.",
              "properties": {
                "entries": {
                  "description": "Entries of Kubernetes resource object references.",
                  "items": {
                    "description": "ResourceRef contains the information necessary to locate a resource within a cluster.",
                    "properties": {
                      "id": {
                        "description": "ID is the string representation of the Kubernetes resource object's metadata,\nin the format '<namespace>_<name>_<group>_<kind>'.",
                        "type": "string"
                      },
                      "v": {
                        "description": "Version is the API version of the Kubernetes resource object's kind.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "v"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "entries"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "lastAppliedRevision": {
              "description": "The last successfully applied revision.\nEquals the Revision of the applied Artifact from the referenced Source.",
              "type": "string"
            },
            "lastAttemptedRevision": {
              "description": "LastAttemptedRevision is the revision of the last reconciliation attempt.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1.OCIRepository": {
      "description": "OCIRepository is the Schema for the ocirepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OCIRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "OCIRepositorySpec defines the desired state of OCIRepository",
          "properties": {
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nregistry. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP container registry.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the OCIRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "layerSelector": {
              "description": "LayerSelector specifies which layer should be extracted from the OCI artifact.\nWhen not specified, the first layer found in the artifact is selected.",
              "properties": {
                "mediaType": {
                  "description": "MediaType specifies the OCI media type of the layer\nwhich should be extracted from the OCI Artifact. The\nfirst layer matching this type is selected.",
                  "type": "string"
                },
                "operation": {
                  "description": "Operation specifies how the selected layer should be processed.\nBy default, the layer compressed content is extracted to storage.\nWhen the operation is set to 'copy', the layer compressed content\nis persisted to storage as it is.",
                  "enum": [
                    "extract",
                    "copy"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "provider": {
              "default": "generic",
              "description": "The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "aws",
                "azure",
                "gcp"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the container registry.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "ref": {
              "description": "The OCI reference to pull and monitor for changes,\ndefaults to the latest tag.",
              "properties": {
                "digest": {
                  "description": "Digest is the image digest to pull, takes precedence over SemVer.\nThe value should be in the format 'sha256:<HASH>'.",
                  "type": "string"
                },
                "semver": {
                  "description": "SemVer is the range of tags to pull selecting the latest within\nthe range, takes precedence over Tag.",
                  "type": "string"
                },
                "semverFilter": {
                  "description": "SemverFilter is a regex pattern to filter the tags within the SemVer range.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag is the image tag to pull, defaults to latest.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "SecretRef contains the secret name containing the registry login\ncredentials to resolve image metadata.\nThe secret must be of type kubernetes.io/dockerconfigjson.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate\nthe image pull if the service account has attached pull secrets. For more information:\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account",
              "type": "string"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "The timeout for remote OCI Repository operations like pulling, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "url": {
              "description": "URL is a reference to an OCI artifact repository hosted\non a remote container registry.",
              "pattern": "^oci://.*$",
              "type": "string"
            },
            "verify": {
              "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.",
              "properties": {
                "matchOIDCIdentity": {
                  "description": "MatchOIDCIdentity specifies the identity matching criteria to use\nwhile verifying an OCI artifact which was signed using Cosign keyless\nsigning. The artifact's identity is deemed to be verified if any of the\nspecified matchers match against the identity.",
                  "items": {
                    "description": "OIDCIdentityMatch specifies options for verifying the certificate identity,\ni.e. the issuer and the subject of the certificate.",
                    "properties": {
                      "issuer": {
                        "description": "Issuer specifies the regex pattern to match against to verify\nthe OIDC issuer in the Fulcio certificate. The pattern must be a\nvalid Go regular expression.",
                        "type": "string"
                      },
                      "subject": {
                        "description": "Subject specifies the regex pattern to match against to verify\nthe identity subject in the Fulcio certificate. The pattern must\nbe a valid Go regular expression.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issuer",
                      "subject"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "provider": {
                  "default": "cosign",
                  "description": "Provider specifies the technology used to sign the OCI Artifact.",
                  "enum": [
                    "cosign",
                    "notation"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "OCIRepositoryStatus defines the observed state of OCIRepository",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful OCI Repository sync.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the OCIRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "observedLayerSelector": {
              "description": "ObservedLayerSelector is the observed layer selector used for constructing\nthe source artifact.",
              "properties": {
                "mediaType": {
                  "description": "MediaType specifies the OCI media type of the layer\nwhich should be extracted from the OCI Artifact. The\nfirst layer matching this type is selected.",
                  "type": "string"
                },
                "operation": {
                  "description": "Operation specifies how the selected layer should be processed.\nBy default, the layer compressed content is extracted to storage.\nWhen the operation is set to 'copy', the layer compressed content\nis persisted to storage as it is.",
                  "enum": [
                    "extract",
                    "copy"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "url": {
              "description": "URL is the download link for the artifact output of the last OCI Repository sync.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "source.toolkit.fluxcd.io.v1beta2.OCIRepository": {
      "description": "OCIRepository is the Schema for the ocirepositories API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "source.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OCIRepository"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "OCIRepositorySpec defines the desired state of OCIRepository",
          "properties": {
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a Secret containing\neither or both of\n\n- a PEM-encoded client certificate (`tls.crt`) and private\nkey (`tls.key`);\n- a PEM-encoded CA certificate (`ca.crt`)\n\nand whichever are supplied, will be used for connecting to the\nregistry. The client cert and key are useful if you are\nauthenticating with a certificate; the CA cert is useful if\nyou are using a self-signed server certificate. The Secret must\nbe of type `Opaque` or `kubernetes.io/tls`.\n\nNote: Support for the `caFile`, `certFile` and `keyFile` keys have\nbeen deprecated.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "ignore": {
              "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
              "type": "string"
            },
            "insecure": {
              "description": "Insecure allows connecting to a non-TLS HTTP container registry.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval at which the OCIRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "layerSelector": {
              "description": "LayerSelector specifies which layer should be extracted from the OCI artifact.\nWhen not specified, the first layer found in the artifact is selected.",
              "properties": {
                "mediaType": {
                  "description": "MediaType specifies the OCI media type of the layer\nwhich should be extracted from the OCI Artifact. The\nfirst layer matching this type is selected.",
                  "type": "string"
                },
                "operation": {
                  "description": "Operation specifies how the selected layer should be processed.\nBy default, the layer compressed content is extracted to storage.\nWhen the operation is set to 'copy', the layer compressed content\nis persisted to storage as it is.",
                  "enum": [
                    "extract",
                    "copy"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "provider": {
              "default": "generic",
              "description": "The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.\nWhen not specified, defaults to 'generic'.",
              "enum": [
                "generic",
                "aws",
                "azure",
                "gcp"
              ],
              "type": "string"
            },
            "proxySecretRef": {
              "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the container registry.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "ref": {
              "description": "The OCI reference to pull and monitor for changes,\ndefaults to the latest tag.",
              "properties": {
                "digest": {
                  "description": "Digest is the image digest to pull, takes precedence over SemVer.\nThe value should be in the format 'sha256:<HASH>'.",
                  "type": "string"
                },
                "semver": {
                  "description": "SemVer is the range of tags to pull selecting the latest within\nthe range, takes precedence over Tag.",
                  "type": "string"
                },
                "semverFilter": {
                  "description": "SemverFilter is a regex pattern to filter the tags within the SemVer range.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag is the image tag to pull, defaults to latest.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretRef": {
              "description": "SecretRef contains the secret name containing the registry login\ncredentials to resolve image metadata.\nThe secret must be of type kubernetes.io/dockerconfigjson.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate\nthe image pull if the service account has attached pull secrets. For more information:\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account",
              "type": "string"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend the reconciliation of this source.",
              "type": "boolean"
            },
            "timeout": {
              "default": "60s",
              "description": "The timeout for remote OCI Repository operations like pulling, defaults to 60s.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "url": {
              "description": "URL is a reference to an OCI artifact repository hosted\non a remote container registry.",
              "pattern": "^oci://.*$",
              "type": "string"
            },
            "verify": {
              "description": "Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.",
              "properties": {
                "matchOIDCIdentity": {
                  "description": "MatchOIDCIdentity specifies the identity matching criteria to use\nwhile verifying an OCI artifact which was signed using Cosign keyless\nsigning. The artifact's identity is deemed to be verified if any of the\nspecified matchers match against the identity.",
                  "items": {
                    "description": "OIDCIdentityMatch specifies options for verifying the certificate identity,\ni.e. the issuer and the subject of the certificate.",
                    "properties": {
                      "issuer": {
                        "description": "Issuer specifies the regex pattern to match against to verify\nthe OIDC issuer in the Fulcio certificate. The pattern must be a\nvalid Go regular expression.",
                        "type": "string"
                      },
                      "subject": {
                        "description": "Subject specifies the regex pattern to match against to verify\nthe identity subject in the Fulcio certificate. The pattern must\nbe a valid Go regular expression.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issuer",
                      "subject"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "provider": {
                  "default": "cosign",
                  "description": "Provider specifies the technology used to sign the OCI Artifact.",
                  "enum": [
                    "cosign",
                    "notation"
                  ],
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "provider"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "interval",
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "OCIRepositoryStatus defines the observed state of OCIRepository",
          "properties": {
            "artifact": {
              "description": "Artifact represents the output of the last successful OCI Repository sync.",
              "properties": {
                "digest": {
                  "description": "Digest is the digest of the file in the form of '<algorithm>:<checksum>'.",
                  "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$",
                  "type": "string"
                },
                "lastUpdateTime": {
                  "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                  "format": "date-time",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Metadata holds upstream information such as OCI annotations.",
                  "type": "object"
                },
                "path": {
                  "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                  "type": "string"
                },
                "size": {
                  "description": "Size is the number of bytes in the file.",
                  "format": "int64",
                  "type": "integer"
                },
                "url": {
                  "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                  "type": "string"
                }
              },
              "required": [
                "lastUpdateTime",
                "path",
                "revision",
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "conditions": {
              "description": "Conditions holds the conditions for the OCIRepository.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "contentConfigChecksum": {
              "description": "ContentConfigChecksum is a checksum of all the configurations related to\nthe content of the source artifact:\n - .spec.ignore\n - .spec.layerSelector\nobserved in .status.observedGeneration version of the object. This can\nbe used to determine if the content configuration has changed and the\nartifact needs to be rebuilt.\nIt has the format of `<algo>:<checksum>`, for example: `sha256:<checksum>`.\n\nDeprecated: Replaced with explicit fields for observed artifact content\nconfig in the status.",
              "type": "string"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "observedIgnore": {
              "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
              "type": "string"
            },
            "observedLayerSelector": {
              "description": "ObservedLayerSelector is the observed layer selector used for constructing\nthe source artifact.",
              "properties": {
                "mediaType": {
                  "description": "MediaType specifies the OCI media type of the layer\nwhich should be extracted from the OCI Artifact. The\nfirst layer matching this type is selected.",
                  "type": "string"
                },
                "operation": {
                  "description": "Operation specifies how the selected layer should be processed.\nBy default, the layer compressed content is extracted to storage.\nWhen the operation is set to 'copy', the layer compressed content\nis persisted to storage as it is.",
                  "enum": [
                    "extract",
                    "copy"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "url": {
              "description": "URL is the download link for the artifact output of the last OCI Repository sync.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta1.Provider": {
      "description": "Provider is the Schema for the providers API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Provider"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ProviderSpec defines the desired state of Provider",
          "properties": {
            "address": {
              "description": "HTTP/S webhook address of this provider",
              "pattern": "^(http|https)://",
              "type": "string"
            },
            "certSecretRef": {
              "description": "CertSecretRef can be given the name of a secret containing\na PEM-encoded CA certificate (`caFile`)",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "channel": {
              "description": "Alert channel for this provider",
              "type": "string"
            },
            "proxy": {
              "description": "HTTP/S address of the proxy",
              "pattern": "^(http|https)://",
              "type": "string"
            },
            "secretRef": {
              "description": "Secret reference containing the provider webhook URL\nusing \"address\" as data key",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent events handling.\nDefaults to false.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout for sending alerts to the provider.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "type": {
              "description": "Type of provider",
              "enum": [
                "slack",
                "discord",
                "msteams",
                "rocket",
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "bitbucket",
                "azuredevops",
                "googlechat",
                "webex",
                "sentry",
                "azureeventhub",
                "telegram",
                "lark",
                "matrix",
                "opsgenie",
                "alertmanager",
                "grafana",
                "githubdispatch"
              ],
              "type": "string"
            },
            "username": {
              "description": "Bot username for this provider",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ProviderStatus defines the observed state of Provider",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta2.Provider": {
      "description": "Provider is the Schema for the providers API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Provider"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ProviderSpec defines the desired state of the Provider.",
          "properties": {
            "address": {
              "description": "Address specifies the endpoint, in a generic sense, to where alerts are sent.\nWhat kind of endpoint depends on the specific Provider type being used.\nFor the generic Provider, for example, this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.",
              "maxLength": 2048,
              "type": "string"
            },
            "certSecretRef": {
              "description": "CertSecretRef specifies the Secret containing\na PEM-encoded CA certificate (in the `ca.crt` key).\n\nNote: Support for the `caFile` key has\nbeen deprecated.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "channel": {
              "description": "Channel specifies the destination channel where events should be posted.",
              "maxLength": 2048,
              "type": "string"
            },
            "interval": {
              "description": "Interval at which to reconcile the Provider with its Secret references.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "proxy": {
              "description": "Proxy the HTTP/S address of the proxy server.",
              "maxLength": 2048,
              "pattern": "^(http|https)://.*$",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the authentication\ncredentials for this Provider.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this Provider.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout for sending alerts to the Provider.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "type": {
              "description": "Type specifies which Provider implementation to use.",
              "enum": [
                "slack",
                "discord",
                "msteams",
                "rocket",
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "gitea",
                "bitbucketserver",
                "bitbucket",
                "azuredevops",
                "googlechat",
                "googlepubsub",
                "webex",
                "sentry",
                "azureeventhub",
                "telegram",
                "lark",
                "matrix",
                "opsgenie",
                "alertmanager",
                "grafana",
                "githubdispatch",
                "pagerduty",
                "datadog"
              ],
              "type": "string"
            },
            "username": {
              "description": "Username specifies the name under which events are posted.",
              "maxLength": 2048,
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ProviderStatus defines the observed state of the Provider.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the Provider.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last reconciled generation.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta3.Provider": {
      "description": "Provider is the Schema for the providers API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta3"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Provider"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ProviderSpec defines the desired state of the Provider.",
          "properties": {
            "address": {
              "description": "Address specifies the endpoint, in a generic sense, to where alerts are sent.\nWhat kind of endpoint depends on the specific Provider type being used.\nFor the generic Provider, for example, this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.",
              "maxLength": 2048,
              "type": "string"
            },
            "certSecretRef": {
              "description": "CertSecretRef specifies the Secret containing\na PEM-encoded CA certificate (in the `ca.crt` key).\n\nNote: Support for the `caFile` key has\nbeen deprecated.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "channel": {
              "description": "Channel specifies the destination channel where events should be posted.",
              "maxLength": 2048,
              "type": "string"
            },
            "commitStatusExpr": {
              "description": "CommitStatusExpr is a CEL expression that evaluates to a string value\nthat can be used to generate a custom commit status message for use\nwith eligible Provider types (github, gitlab, gitea, bitbucketserver,\nbitbucket, azuredevops). Supported variables are: event, provider,\nand alert.",
              "type": "string"
            },
            "interval": {
              "description": "Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "proxy": {
              "description": "Proxy the HTTP/S address of the proxy server.",
              "maxLength": 2048,
              "pattern": "^(http|https)://.*$",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the authentication\ncredentials for this Provider.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the service account used to\nauthenticate with services from cloud providers. An error is thrown if a\nstatic credential is also defined inside the Secret referenced by the\nSecretRef.",
              "type": "string"
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this Provider.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout for sending alerts to the Provider.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
              "type": "string"
            },
            "type": {
              "description": "Type specifies which Provider implementation to use.",
              "enum": [
                "slack",
                "discord",
                "msteams",
                "rocket",
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "gitea",
                "bitbucketserver",
                "bitbucket",
                "azuredevops",
                "googlechat",
                "googlepubsub",
                "webex",
                "sentry",
                "azureeventhub",
                "telegram",
                "lark",
                "matrix",
                "opsgenie",
                "alertmanager",
                "grafana",
                "githubdispatch",
                "pagerduty",
                "datadog",
                "nats"
              ],
              "type": "string"
            },
            "username": {
              "description": "Username specifies the name under which events are posted.",
              "maxLength": 2048,
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "spec.commitStatusExpr is only supported for the 'github', 'gitlab', 'gitea', 'bitbucketserver', 'bitbucket', 'azuredevops' provider types",
              "rule": "self.type == 'github' || self.type == 'gitlab' || self.type == 'gitea' || self.type == 'bitbucketserver' || self.type == 'bitbucket' || self.type == 'azuredevops' || !has(self.commitStatusExpr)"
            }
          ],
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1.Receiver": {
      "description": "Receiver is the Schema for the receivers API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Receiver"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ReceiverSpec defines the desired state of the Receiver.",
          "properties": {
            "events": {
              "description": "Events specifies the list of event types to handle,\ne.g. 'push' for GitHub or 'Push Hook' for GitLab.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "interval": {
              "default": "10m",
              "description": "Interval at which to reconcile the Receiver with its Secret references.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "resourceFilter": {
              "description": "ResourceFilter is a CEL expression expected to return a boolean that is\nevaluated for each resource referenced in the Resources field when a\nwebhook is received. If the expression returns false then the controller\nwill not request a reconciliation for the resource.\nWhen the expression is specified the controller will parse it and mark\nthe object as terminally failed if the expression is invalid or does not\nreturn a boolean.",
              "type": "string"
            },
            "resources": {
              "description": "A list of resources to be notified about changes.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent\nIf multiple resources are targeted `*` may be set.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the token used\nto validate the payload authenticity.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this receiver.",
              "type": "boolean"
            },
            "type": {
              "description": "Type of webhook sender, used to determine\nthe validation procedure and payload deserialization.",
              "enum": [
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "bitbucket",
                "harbor",
                "dockerhub",
                "quay",
                "gcr",
                "nexus",
                "acr",
                "cdevents"
              ],
              "type": "string"
            }
          },
          "required": [
            "resources",
            "secretRef",
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ReceiverStatus defines the observed state of the Receiver.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the Receiver.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the Receiver object.",
              "format": "int64",
              "type": "integer"
            },
            "webhookPath": {
              "description": "WebhookPath is the generated incoming webhook address in the format\nof '/hook/sha256sum(token+name+namespace)'.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta1.Receiver": {
      "description": "Receiver is the Schema for the receivers API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Receiver"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ReceiverSpec defines the desired state of Receiver",
          "properties": {
            "events": {
              "description": "A list of events to handle,\ne.g. 'push' for GitHub or 'Push Hook' for GitLab.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "resources": {
              "description": "A list of resources to be notified about changes.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent",
                    "maxLength": 53,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 53,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretRef": {
              "description": "Secret reference containing the token used\nto validate the payload authenticity",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent events handling.\nDefaults to false.",
              "type": "boolean"
            },
            "type": {
              "description": "Type of webhook sender, used to determine\nthe validation procedure and payload deserialization.",
              "enum": [
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "bitbucket",
                "harbor",
                "dockerhub",
                "quay",
                "gcr",
                "nexus",
                "acr"
              ],
              "type": "string"
            }
          },
          "required": [
            "resources",
            "secretRef",
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ReceiverStatus defines the observed state of Receiver",
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "Generated webhook URL in the format\nof '/hook/sha256sum(token+name+namespace)'.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    },
    "notification.toolkit.fluxcd.io.v1beta2.Receiver": {
      "description": "Receiver is the Schema for the receivers API.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "notification.toolkit.fluxcd.io/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Receiver"
          ]
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "description": "ReceiverSpec defines the desired state of the Receiver.",
          "properties": {
            "events": {
              "description": "Events specifies the list of event types to handle,\ne.g. 'push' for GitHub or 'Push Hook' for GitLab.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "interval": {
              "description": "Interval at which to reconcile the Receiver with its Secret references.",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
              "type": "string"
            },
            "resources": {
              "description": "A list of resources to be notified about changes.",
              "items": {
                "description": "CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent",
                    "enum": [
                      "Bucket",
                      "GitRepository",
                      "Kustomization",
                      "HelmRelease",
                      "HelmChart",
                      "HelmRepository",
                      "ImageRepository",
                      "ImagePolicy",
                      "ImageUpdateAutomation",
                      "OCIRepository"
                    ],
                    "type": "string"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the referent\nIf multiple resources are targeted `*` may be set.",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent",
                    "maxLength": 253,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the token used\nto validate the payload authenticity.",
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "suspend": {
              "description": "Suspend tells the controller to suspend subsequent\nevents handling for this receiver.",
              "type": "boolean"
            },
            "type": {
              "description": "Type of webhook sender, used to determine\nthe validation procedure and payload deserialization.",
              "enum": [
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "bitbucket",
                "harbor",
                "dockerhub",
                "quay",
                "gcr",
                "nexus",
                "acr"
              ],
              "type": "string"
            }
          },
          "required": [
            "resources",
            "secretRef",
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "default": {
            "observedGeneration": -1
          },
          "description": "ReceiverStatus defines the observed state of the Receiver.",
          "properties": {
            "conditions": {
              "description": "Conditions holds the conditions for the Receiver.",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lastHandledReconcileAt": {
              "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
              "type": "string"
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last observed generation of the Receiver object.",
              "format": "int64",
              "type": "integer"
            },
            "url": {
              "description": "URL is the generated incoming webhook address in the format\nof '/hook/sha256sum(token+name+namespace)'.\nDeprecated: Replaced by WebhookPath.",
              "type": "string"
            },
            "webhookPath": {
              "description": "WebhookPath is the generated incoming webhook address in the format\nof '/hook/sha256sum(token+name+namespace)'.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object"
    }
  }
}